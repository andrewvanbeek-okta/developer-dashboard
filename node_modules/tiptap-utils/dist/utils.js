
    /*!
    * tiptap-utils v1.9.0
    * (c) 2020 Scrumpy UG (limited liability)
    * @license MIT
    */
  
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('prosemirror-utils')) :
  typeof define === 'function' && define.amd ? define(['exports', 'prosemirror-utils'], factory) :
  (global = global || self, factory(global.tiptapUtils = {}, global.prosemirrorUtils));
}(this, (function (exports, prosemirrorUtils) { 'use strict';

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function getMarkAttrs(state, type) {
    var _state$selection = state.selection,
        from = _state$selection.from,
        to = _state$selection.to;
    var marks = [];
    state.doc.nodesBetween(from, to, function (node) {
      marks = [].concat(_toConsumableArray(marks), _toConsumableArray(node.marks));
    });
    var mark = marks.find(function (markItem) {
      return markItem.type.name === type.name;
    });

    if (mark) {
      return mark.attrs;
    }

    return {};
  }

  function getNodeAttrs(state, type) {
    var _state$selection = state.selection,
        from = _state$selection.from,
        to = _state$selection.to;
    var nodes = [];
    state.doc.nodesBetween(from, to, function (node) {
      nodes = [].concat(_toConsumableArray(nodes), [node]);
    });
    var node = nodes.reverse().find(function (nodeItem) {
      return nodeItem.type.name === type.name;
    });

    if (node) {
      return node.attrs;
    }

    return {};
  }

  function getMarkRange() {
    var $pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!$pos || !type) {
      return false;
    }

    var start = $pos.parent.childAfter($pos.parentOffset);

    if (!start.node) {
      return false;
    }

    var link = start.node.marks.find(function (mark) {
      return mark.type === type;
    });

    if (!link) {
      return false;
    }

    var startIndex = $pos.index();
    var startPos = $pos.start() + start.offset;
    var endIndex = startIndex + 1;
    var endPos = startPos + start.node.nodeSize;

    while (startIndex > 0 && link.isInSet($pos.parent.child(startIndex - 1).marks)) {
      startIndex -= 1;
      startPos -= $pos.parent.child(startIndex).nodeSize;
    }

    while (endIndex < $pos.parent.childCount && link.isInSet($pos.parent.child(endIndex).marks)) {
      endPos += $pos.parent.child(endIndex).nodeSize;
      endIndex += 1;
    }

    return {
      from: startPos,
      to: endPos
    };
  }

  function markIsActive(state, type) {
    var _state$selection = state.selection,
        from = _state$selection.from,
        $from = _state$selection.$from,
        to = _state$selection.to,
        empty = _state$selection.empty;

    if (empty) {
      return !!type.isInSet(state.storedMarks || $from.marks());
    }

    return !!state.doc.rangeHasMark(from, to, type);
  }

  function nodeEqualsType(_ref) {
    var types = _ref.types,
        node = _ref.node;
    return Array.isArray(types) && types.includes(node.type) || node.type === types;
  }

  function nodeIsActive(state, type) {
    var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var predicate = function predicate(node) {
      return node.type === type;
    };

    var node = prosemirrorUtils.findSelectedNodeOfType(type)(state.selection) || prosemirrorUtils.findParentNode(predicate)(state.selection);

    if (!Object.keys(attrs).length || !node) {
      return !!node;
    }

    return node.node.hasMarkup(type, _objectSpread2({}, node.node.attrs, {}, attrs));
  }

  exports.getMarkAttrs = getMarkAttrs;
  exports.getMarkRange = getMarkRange;
  exports.getNodeAttrs = getNodeAttrs;
  exports.markIsActive = markIsActive;
  exports.nodeEqualsType = nodeEqualsType;
  exports.nodeIsActive = nodeIsActive;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
