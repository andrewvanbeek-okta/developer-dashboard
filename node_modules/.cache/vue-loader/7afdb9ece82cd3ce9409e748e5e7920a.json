{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrewvanbeek/okta/dev-dash/src/views/Opa.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/src/views/Opa.vue","mtime":1592940960563},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Editor, EditorContent } from 'tiptap'\nexport default {\n  components: {\n    EditorContent,\n  },\n  client_name: \"Developer\",\n  data: () => ({\n\n    opaText: \"\",\n    opaResponse: \"\",\n    dialog: false,\n    method: \"GET\",\n    path: \"finance\",\n    access_token: \"\",\n    editor: null,\n    regoFragements: [],\n    client_creds_scopes: \"\",\n    user: \"\",\n    clients: [],\n    editedIndex: -1,\n    viewedItem: {\n      client_name: '',\n      client_id: 0,\n      client_secret: 0,\n    },\n    defaultItem: {\n      client_name: '',\n      client_id: 0,\n    },\n  }),\n\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? 'New Oauth App' : 'View Oauth Client'\n    },\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close()\n    },\n  },\n\n  created() {\n    this.initialize()\n    console.log(process.env.VUE_APP_OKTA_ISSUER)\n    this.okta_issuer = process.env.VUE_APP_OKTA_ISSUER\n  },\n\n  methods: {\n    async initialize() {\n      var component = this\n      var user = await this.$auth.getUser()\n      var accessToken = await this.$auth.getAccessToken();\n      const accessTokenobj = {\n        accessToken\n      }\n      this.user = user.preferred_username\n      const baseURI = \"http://localhost:8000/opa\"\n      var opa = await this.$http.get(baseURI)\n      this.regoFragements = opa.data.rego.split(\"\\n\")\n      var rego = opa.data.rego.split('\\n').join('</br>');\n      var niceRego = this.createPrettyString(this.regoFragements)\n      this.editor = new Editor({\n        content: niceRego,\n      })\n    },\n    async saveRego() {\n      const baseURI = \"http://localhost:8000/rego\"\n      var jsonContent = this.editor.getJSON()\n      var htmlContent = this.editor.getHTML()\n      console.log(jsonContent.content)\n      var regoToSend = this.createFormattedString(jsonContent.content)\n      console.log(regoToSend)\n      var opa = await this.$http.post(baseURI, {rego: regoToSend})\n    },\n    async sendToOpa() {\n      var component = this\n      const baseURI = \"http://localhost:8000/opaAuthz\"\n      var opa = await this.$http.post(baseURI, {\n          \"method\": component.method,\n          \"path\": component.path,\n          \"token\": component.access_token\n      })\n      console.log(opa)\n      component.opaResponse = opa.data\n      component.dialog = true\n    },\n    async resetRego() {\n      const baseURI = \"http://localhost:8000/rego\"\n      var opa = await this.$http.delete(baseURI)\n      this.$router.go()\n    },\n    createPrettyString(fragments) {\n      var string = \"\"\n      fragments.forEach((item, i) => {\n        string += \"<p>\" + item + \"</p><br>\"\n      });\n      return string\n    },\n    createFormattedString(contentObjects) {\n      var string = \"\"\n      contentObjects.forEach((item, i) => {\n        if(item.content) {\n          string += item.content[0].text + \"\\n\"\n          if(item.content[0].text.includes(\"}\")){\n            string += \"\\n\"\n          }\n        }\n      });\n      return string\n    },\n    async logout() {\n      await this.$auth.logout()\n      await this.$auth.isAuthenticated()\n\n      // Navigate back to home\n      window.location.reload()\n    }\n  },\n}\n",{"version":3,"sources":["Opa.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"Opa.vue","sourceRoot":"src/views","sourcesContent":["<template>\n\n  <v-row justify=\"center\">\n    <v-dialog v-model=\"dialog\" scrollable max-width=\"300px\">\n    {{opaResponse}}\n    </v-dialog>\n  \n    <v-col cols=\"6\">\n      <v-card width=\"1000px\" scrollable=\"true\">\n        <v-card-title>Test Authorization</v-card-title>\n        <v-divider></v-divider>\n        <v-card-actions>\n          <v-btn color=\"blue darken-1\" text @click=\"sendToOpa()\">Send</v-btn>\n        </v-card-actions>\n        <v-divider></v-divider>\n        <v-form v-model=\"valid\">\n          <v-container>\n            <v-row>\n              <v-col\n              cols=\"12\"\n              md=\"4\"\n              >\n              <v-text-field\n              v-model=\"method\"\n              ></v-text-field>\n            </v-col>\n\n            <v-col\n            cols=\"12\"\n            md=\"4\"\n            >\n            <v-text-field\n            v-model=\"path\"\n            ></v-text-field>\n          </v-col>\n        </v-row>\n        <v-row>\n          <v-col cols=\"12\" md=\"6\">\n            <v-textarea\n            outlined\n            name=\"input-7-4\"\n            label=\"Outlined textarea\"\n            v-model=\"access_token\"\n            ></v-textarea>\n          </v-col>\n        </v-row>\n      </v-container>\n    </v-form>\n    <div class=\"d-block pa-2 black white--text scroll\">\n      What we are going to send to Open Policy Agent\n      {\n        \"input\":{\n          \"method\": \"{{method}}\",\n          \"path\": \"{{path}}\",\n          \"token\": \"{{access_token}}\"\n        }\n      }\n    </div>\n    <v-divider></v-divider>\n  </v-card>\n</v-col>\n<v-col cols=\"6\">\n  <v-card max-height=\"200px\" width=\"1000px\" scrollable=\"true\">\n    <v-card-title>Edit Opa Policy</v-card-title>\n    <v-divider></v-divider>\n    <div class=\"d-block pa-2 black white--text scroll\">\n      <!-- <h3>Run command below</h3>\n      <p v-for=\"fragment in regoFragements\">{{fragment}}<br></p> -->\n      <editor-content :editor=\"editor\" />\n    </div>\n    <v-divider></v-divider>\n    <v-card-actions>\n      <v-btn color=\"blue darken-1\" text @click=\"saveRego()\">Save</v-btn>\n      <v-btn color=\"blue darken-1\" text @click=\"resetRego()\">Reset</v-btn>\n    </v-card-actions>\n  </v-card>\n</v-col>\n</v-row>\n</template>\n\n<script>\nimport { Editor, EditorContent } from 'tiptap'\nexport default {\n  components: {\n    EditorContent,\n  },\n  client_name: \"Developer\",\n  data: () => ({\n\n    opaText: \"\",\n    opaResponse: \"\",\n    dialog: false,\n    method: \"GET\",\n    path: \"finance\",\n    access_token: \"\",\n    editor: null,\n    regoFragements: [],\n    client_creds_scopes: \"\",\n    user: \"\",\n    clients: [],\n    editedIndex: -1,\n    viewedItem: {\n      client_name: '',\n      client_id: 0,\n      client_secret: 0,\n    },\n    defaultItem: {\n      client_name: '',\n      client_id: 0,\n    },\n  }),\n\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? 'New Oauth App' : 'View Oauth Client'\n    },\n  },\n\n  watch: {\n    dialog(val) {\n      val || this.close()\n    },\n  },\n\n  created() {\n    this.initialize()\n    console.log(process.env.VUE_APP_OKTA_ISSUER)\n    this.okta_issuer = process.env.VUE_APP_OKTA_ISSUER\n  },\n\n  methods: {\n    async initialize() {\n      var component = this\n      var user = await this.$auth.getUser()\n      var accessToken = await this.$auth.getAccessToken();\n      const accessTokenobj = {\n        accessToken\n      }\n      this.user = user.preferred_username\n      const baseURI = \"http://localhost:8000/opa\"\n      var opa = await this.$http.get(baseURI)\n      this.regoFragements = opa.data.rego.split(\"\\n\")\n      var rego = opa.data.rego.split('\\n').join('</br>');\n      var niceRego = this.createPrettyString(this.regoFragements)\n      this.editor = new Editor({\n        content: niceRego,\n      })\n    },\n    async saveRego() {\n      const baseURI = \"http://localhost:8000/rego\"\n      var jsonContent = this.editor.getJSON()\n      var htmlContent = this.editor.getHTML()\n      console.log(jsonContent.content)\n      var regoToSend = this.createFormattedString(jsonContent.content)\n      console.log(regoToSend)\n      var opa = await this.$http.post(baseURI, {rego: regoToSend})\n    },\n    async sendToOpa() {\n      var component = this\n      const baseURI = \"http://localhost:8000/opaAuthz\"\n      var opa = await this.$http.post(baseURI, {\n          \"method\": component.method,\n          \"path\": component.path,\n          \"token\": component.access_token\n      })\n      console.log(opa)\n      component.opaResponse = opa.data\n      component.dialog = true\n    },\n    async resetRego() {\n      const baseURI = \"http://localhost:8000/rego\"\n      var opa = await this.$http.delete(baseURI)\n      this.$router.go()\n    },\n    createPrettyString(fragments) {\n      var string = \"\"\n      fragments.forEach((item, i) => {\n        string += \"<p>\" + item + \"</p><br>\"\n      });\n      return string\n    },\n    createFormattedString(contentObjects) {\n      var string = \"\"\n      contentObjects.forEach((item, i) => {\n        if(item.content) {\n          string += item.content[0].text + \"\\n\"\n          if(item.content[0].text.includes(\"}\")){\n            string += \"\\n\"\n          }\n        }\n      });\n      return string\n    },\n    async logout() {\n      await this.$auth.logout()\n      await this.$auth.isAuthenticated()\n\n      // Navigate back to home\n      window.location.reload()\n    }\n  },\n}\n</script>\n\n<style>\n.scroll {\n  overflow-y: auto;\n  height: 600px;\n}\n</style>\n"]}]}