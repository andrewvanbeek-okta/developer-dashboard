{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/andrewvanbeek/opa-dev-dash/src/views/Opa.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/src/views/Opa.vue","mtime":1592923253056},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify-loader/lib/loader.js","mtime":1592873617526},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vue-loader/lib/index.js","mtime":1592873617424}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Editor, EditorContent } from 'tiptap'\nimport {\n  CodeBlockHighlight,\n  HardBreak,\n  Heading,\n  Bold,\n  Code,\n  Italic,\n} from 'tiptap-extensions'\nexport default {\n  components: {\n    EditorContent,\n  },\n  client_name: \"Developer\",\n  data: () => ({\n    opaText: \"\",\n    editor: null,\n    regoFragements: [],\n    show1: false,\n    dialog: false,\n    new_client_name: \"\",\n    policy_url: \"\",\n    terms_url: \"\",\n    okta_issuer: \"\",\n    userField: false,\n    baseEncode: \"\",\n    user_scopes: \"openid email profile\",\n    items: [{\n      consent: \"IMPLICIT\",\n      default: false,\n      description: null,\n      id: \"scpjeez3czmycNAvE0h7\",\n      metadataPublish: \"NO_CLIENTS\",\n      name: \"Admin\",\n      system: false\n    }],\n    client_creds_scopes: \"\",\n    user: \"\",\n    headers: [{\n      text: 'Oauth Clients',\n      align: 'start',\n      sortable: false,\n      value: 'client_name',\n    },\n    {\n      text: 'client_id',\n      value: 'client_id'\n    },\n    {\n      text: 'Actions',\n      value: 'action',\n      sortable: false\n    },\n  ],\n  clients: [],\n  editedIndex: -1,\n  viewedItem: {\n    client_name: '',\n    client_id: 0,\n    client_secret: 0,\n  },\n  defaultItem: {\n    client_name: '',\n    client_id: 0,\n  },\n}),\n\ncomputed: {\n  formTitle() {\n    return this.editedIndex === -1 ? 'New Oauth App' : 'View Oauth Client'\n  },\n},\n\nwatch: {\n  dialog(val) {\n    val || this.close()\n  },\n},\n\ncreated() {\n  this.initialize()\n  console.log(process.env.VUE_APP_OKTA_ISSUER)\n  this.okta_issuer = process.env.VUE_APP_OKTA_ISSUER\n},\n\nmethods: {\n  async initialize() {\n    var component = this\n    var user = await this.$auth.getUser()\n    var accessToken = await this.$auth.getAccessToken();\n    const accessTokenobj = {\n      accessToken\n    }\n    this.user = user.preferred_username\n    const baseURI = \"http://localhost:8000/opa\"\n    var opa = await this.$http.get(baseURI)\n    this.regoFragements = opa.data.rego.split(\"\\n\")\n    var rego = opa.data.rego.split('\\n').join('</br>');\n    var niceRego = this.createPrettyString(this.regoFragements)\n    this.editor = new Editor({extensions: [\n          new CodeBlockHighlight({\n            languages: {\n              javascript,\n              css,\n              go\n            },\n          }),\n          new HardBreak(),\n          new Heading({ levels: [1, 2, 3] }),\n          new Bold(),\n          new Code(),\n          new Italic(),\n        ],\n\n      content: niceRego,\n    })\n  },\n  async saveRego() {\n    const baseURI = \"http://localhost:8000/rego\"\n    var jsonContent = this.editor.getJSON()\n    var htmlContent = this.editor.getHTML()\n    console.log(jsonContent.content)\n    var regoToSend = this.createFormattedString(jsonContent.content)\n    console.log(regoToSend)\n    var opa = await this.$http.post(baseURI, {rego: regoToSend})\n  },\n  createPrettyString(fragments) {\n    var string = \"\"\n    fragments.forEach((item, i) => {\n      string += \"<p>\" + item + \"</p><br>\"\n    });\n    return string\n  },\n  createFormattedString(contentObjects) {\n    var string = \"\"\n    contentObjects.forEach((item, i) => {\n      if(item.content) {\n        string += item.content[0].text + \"\\n\"\n        if(item.content[0].text.includes(\"}\")){\n          string += \"\\n\"\n        }\n      }\n    });\n    return string\n  },\n  async addScope(item) {\n    if (!this.user_scopes.includes(item)) {\n      this.user_scopes = this.user_scopes + \" \" + item\n    }\n    if (!this.client_creds_scopes.includes(item)) {\n      this.client_creds_scopes = this.client_creds_scopes + \" \" + item\n    }\n  },\n  async removeScope(item) {\n    if (this.user_scopes.includes(\" \" + item)) {\n      this.user_scopes = this.user_scopes.replace(\" \" + item, '')\n    }\n\n    if(this.client_creds_scopes.includes(\" \" + item)) {\n      this.client_creds_scopes = this.client_creds_scopes.replace(\" \" + item, '')\n    }\n  },\n  async logout() {\n    await this.$auth.logout()\n    await this.$auth.isAuthenticated()\n\n    // Navigate back to home\n    window.location.reload()\n  }\n},\n}\n",{"version":3,"sources":["Opa.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Opa.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"container\">\n    <div class=\"text-center\">\n      <v-btn @click=\"saveRego()\"rounded color=\"primary\" dark>Rounded Button</v-btn>\n    </div>\n\n      <!-- <h3>Run command below</h3>\n      <p v-for=\"fragment in regoFragements\">{{fragment}}<br></p> -->\n      <editor-content :editor=\"editor\" />\n\n  </div>\n</template>\n\n<script>\nimport { Editor, EditorContent } from 'tiptap'\nimport {\n  CodeBlockHighlight,\n  HardBreak,\n  Heading,\n  Bold,\n  Code,\n  Italic,\n} from 'tiptap-extensions'\nexport default {\n  components: {\n    EditorContent,\n  },\n  client_name: \"Developer\",\n  data: () => ({\n    opaText: \"\",\n    editor: null,\n    regoFragements: [],\n    show1: false,\n    dialog: false,\n    new_client_name: \"\",\n    policy_url: \"\",\n    terms_url: \"\",\n    okta_issuer: \"\",\n    userField: false,\n    baseEncode: \"\",\n    user_scopes: \"openid email profile\",\n    items: [{\n      consent: \"IMPLICIT\",\n      default: false,\n      description: null,\n      id: \"scpjeez3czmycNAvE0h7\",\n      metadataPublish: \"NO_CLIENTS\",\n      name: \"Admin\",\n      system: false\n    }],\n    client_creds_scopes: \"\",\n    user: \"\",\n    headers: [{\n      text: 'Oauth Clients',\n      align: 'start',\n      sortable: false,\n      value: 'client_name',\n    },\n    {\n      text: 'client_id',\n      value: 'client_id'\n    },\n    {\n      text: 'Actions',\n      value: 'action',\n      sortable: false\n    },\n  ],\n  clients: [],\n  editedIndex: -1,\n  viewedItem: {\n    client_name: '',\n    client_id: 0,\n    client_secret: 0,\n  },\n  defaultItem: {\n    client_name: '',\n    client_id: 0,\n  },\n}),\n\ncomputed: {\n  formTitle() {\n    return this.editedIndex === -1 ? 'New Oauth App' : 'View Oauth Client'\n  },\n},\n\nwatch: {\n  dialog(val) {\n    val || this.close()\n  },\n},\n\ncreated() {\n  this.initialize()\n  console.log(process.env.VUE_APP_OKTA_ISSUER)\n  this.okta_issuer = process.env.VUE_APP_OKTA_ISSUER\n},\n\nmethods: {\n  async initialize() {\n    var component = this\n    var user = await this.$auth.getUser()\n    var accessToken = await this.$auth.getAccessToken();\n    const accessTokenobj = {\n      accessToken\n    }\n    this.user = user.preferred_username\n    const baseURI = \"http://localhost:8000/opa\"\n    var opa = await this.$http.get(baseURI)\n    this.regoFragements = opa.data.rego.split(\"\\n\")\n    var rego = opa.data.rego.split('\\n').join('</br>');\n    var niceRego = this.createPrettyString(this.regoFragements)\n    this.editor = new Editor({extensions: [\n          new CodeBlockHighlight({\n            languages: {\n              javascript,\n              css,\n              go\n            },\n          }),\n          new HardBreak(),\n          new Heading({ levels: [1, 2, 3] }),\n          new Bold(),\n          new Code(),\n          new Italic(),\n        ],\n\n      content: niceRego,\n    })\n  },\n  async saveRego() {\n    const baseURI = \"http://localhost:8000/rego\"\n    var jsonContent = this.editor.getJSON()\n    var htmlContent = this.editor.getHTML()\n    console.log(jsonContent.content)\n    var regoToSend = this.createFormattedString(jsonContent.content)\n    console.log(regoToSend)\n    var opa = await this.$http.post(baseURI, {rego: regoToSend})\n  },\n  createPrettyString(fragments) {\n    var string = \"\"\n    fragments.forEach((item, i) => {\n      string += \"<p>\" + item + \"</p><br>\"\n    });\n    return string\n  },\n  createFormattedString(contentObjects) {\n    var string = \"\"\n    contentObjects.forEach((item, i) => {\n      if(item.content) {\n        string += item.content[0].text + \"\\n\"\n        if(item.content[0].text.includes(\"}\")){\n          string += \"\\n\"\n        }\n      }\n    });\n    return string\n  },\n  async addScope(item) {\n    if (!this.user_scopes.includes(item)) {\n      this.user_scopes = this.user_scopes + \" \" + item\n    }\n    if (!this.client_creds_scopes.includes(item)) {\n      this.client_creds_scopes = this.client_creds_scopes + \" \" + item\n    }\n  },\n  async removeScope(item) {\n    if (this.user_scopes.includes(\" \" + item)) {\n      this.user_scopes = this.user_scopes.replace(\" \" + item, '')\n    }\n\n    if(this.client_creds_scopes.includes(\" \" + item)) {\n      this.client_creds_scopes = this.client_creds_scopes.replace(\" \" + item, '')\n    }\n  },\n  async logout() {\n    await this.$auth.logout()\n    await this.$auth.isAuthenticated()\n\n    // Navigate back to home\n    window.location.reload()\n  }\n},\n}\n</script>\n\n<style>\n.scroll {\n  overflow-y: auto;\n}\n</style>\n"]}]}