{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/path.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/path.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { checkCollinear, getDistance, moveTo } from \"./math\";\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\n\nexport function genPath(points, radius) {\n  var fill = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 75;\n  var start = points.shift();\n  var end = points[points.length - 1];\n  return (fill ? \"M\".concat(start.x, \" \").concat(height - start.x + 2, \" L\").concat(start.x, \" \").concat(start.y) : \"M\".concat(start.x, \" \").concat(start.y)) + points.map(function (point, index) {\n    var next = points[index + 1];\n    var prev = points[index - 1] || start;\n    var isCollinear = next && checkCollinear(next, point, prev);\n\n    if (!next || isCollinear) {\n      return \"L\".concat(point.x, \" \").concat(point.y);\n    }\n\n    var threshold = Math.min(getDistance(prev, point), getDistance(next, point));\n    var isTooCloseForRadius = threshold / 2 < radius;\n    var radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;\n    var before = moveTo(prev, point, radiusForPoint);\n    var after = moveTo(next, point, radiusForPoint);\n    return \"L\".concat(before.x, \" \").concat(before.y, \"S\").concat(point.x, \" \").concat(point.y, \" \").concat(after.x, \" \").concat(after.y);\n  }).join('') + (fill ? \"L\".concat(end.x, \" \").concat(height - start.x + 2, \" Z\") : '');\n}",{"version":3,"sources":["../../../../src/components/VSparkline/helpers/path.ts"],"names":[],"mappings":"AACA,SAAA,cAAA,EAAA,WAAA,EAAA,MAAA;AAEA;;;;AAGA,OAAM,SAAA,OAAA,CAAA,MAAA,EAAA,MAAA,EAA6E;AAAA,MAAzB,IAAyB,uEAA7E,KAA6E;AAAA,MAAX,MAAW,uEAA7E,EAA6E;AACjF,MAAM,KAAK,GAAG,MAAM,CAApB,KAAc,EAAd;AACA,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAN,MAAA,GAAnB,CAAkB,CAAlB;AAEA,SACE,CAAC,IAAI,cAAO,KAAK,CAAC,CAAb,cAAkB,MAAM,GAAG,KAAK,CAAd,CAAA,GAAmB,CAArC,eAA2C,KAAK,CAAC,CAAjD,cAAsD,KAAK,CAA3D,CAAA,eAAsE,KAAK,CAAC,CAA5E,cAAiF,KAAK,CAA3F,CAAK,CAAL,IACA,MAAM,CAAN,GAAA,CACO,UAAA,KAAA,EAAA,KAAA,EAAiB;AACpB,QAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAzB,CAAmB,CAAnB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAZ,CAAM,CAAN,IAAb,KAAA;AACA,QAAM,WAAW,GAAG,IAAI,IAAI,cAAc,CAAA,IAAA,EAAA,KAAA,EAA1C,IAA0C,CAA1C;;AAEA,QAAI,CAAA,IAAA,IAAJ,WAAA,EAA0B;AACxB,wBAAW,KAAK,CAAC,CAAjB,cAAsB,KAAK,CAA3B,CAAA;AACD;;AAED,QAAM,SAAS,GAAG,IAAI,CAAJ,GAAA,CAChB,WAAW,CAAA,IAAA,EADK,KACL,CADK,EAEhB,WAAW,CAAA,IAAA,EAFb,KAEa,CAFK,CAAlB;AAIA,QAAM,mBAAmB,GAAG,SAAS,GAAT,CAAA,GAA5B,MAAA;AACA,QAAM,cAAc,GAAG,mBAAmB,GAAG,SAAS,GAAZ,CAAA,GAA1C,MAAA;AAEA,QAAM,MAAM,GAAG,MAAM,CAAA,IAAA,EAAA,KAAA,EAArB,cAAqB,CAArB;AACA,QAAM,KAAK,GAAG,MAAM,CAAA,IAAA,EAAA,KAAA,EAApB,cAAoB,CAApB;AAEA,sBAAW,MAAM,CAAC,CAAlB,cAAuB,MAAM,CAAC,CAA9B,cAAmC,KAAK,CAAC,CAAzC,cAA8C,KAAK,CAAC,CAApD,cAAyD,KAAK,CAAC,CAA/D,cAAoE,KAAK,CAAzE,CAAA;AApBJ,GAAA,EAAA,IAAA,CADA,EACA,CADA,IAwBC,IAAI,cAAO,GAAG,CAAC,CAAX,cAAgB,MAAM,GAAG,KAAK,CAAd,CAAA,GAAhB,CAAA,UAzBP,EACE,CADF;AA2BD","sourcesContent":["import { Point } from '../VSparkline'\nimport { checkCollinear, getDistance, moveTo } from './math'\n\n/**\n * From https://github.com/unsplash/react-trend/blob/master/src/helpers/DOM.helpers.js#L18\n */\nexport function genPath (points: Point[], radius: number, fill = false, height = 75) {\n  const start = points.shift()!\n  const end = points[points.length - 1]\n\n  return (\n    (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) +\n    points\n      .map((point, index) => {\n        const next = points[index + 1]\n        const prev = points[index - 1] || start\n        const isCollinear = next && checkCollinear(next, point, prev)\n\n        if (!next || isCollinear) {\n          return `L${point.x} ${point.y}`\n        }\n\n        const threshold = Math.min(\n          getDistance(prev, point),\n          getDistance(next, point)\n        )\n        const isTooCloseForRadius = threshold / 2 < radius\n        const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius\n\n        const before = moveTo(prev, point, radiusForPoint)\n        const after = moveTo(next, point, radiusForPoint)\n\n        return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`\n      })\n      .join('') +\n    (fill ? `L${end.x} ${height - start.x + 2} Z` : '')\n  )\n}\n"],"sourceRoot":""}]}