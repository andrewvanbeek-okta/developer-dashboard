{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VColorPicker/VColorPickerCanvas.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VColorPicker/VColorPickerCanvas.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n// Styles\nimport \"../../../src/components/VColorPicker/VColorPickerCanvas.sass\"; // Helpers\n\nimport { clamp, convertToUnit } from \"../../util/helpers\";\nimport { fromHSVA, fromRGBA } from \"./util\"; // Types\n\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'v-color-picker-canvas',\n  props: {\n    color: {\n      type: Object,\n      default: function _default() {\n        return fromRGBA({\n          r: 255,\n          g: 0,\n          b: 0,\n          a: 1\n        });\n      }\n    },\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      default: 10\n    },\n    height: {\n      type: [Number, String],\n      default: 150\n    },\n    width: {\n      type: [Number, String],\n      default: 300\n    }\n  },\n  data: function data() {\n    return {\n      boundingRect: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    };\n  },\n  computed: {\n    dot: function dot() {\n      if (!this.color) return {\n        x: 0,\n        y: 0\n      };\n      return {\n        x: this.color.hsva.s * parseInt(this.width, 10),\n        y: (1 - this.color.hsva.v) * parseInt(this.height, 10)\n      };\n    }\n  },\n  watch: {\n    'color.hue': 'updateCanvas'\n  },\n  mounted: function mounted() {\n    this.updateCanvas();\n  },\n  methods: {\n    emitColor: function emitColor(x, y) {\n      var _this$boundingRect = this.boundingRect,\n          left = _this$boundingRect.left,\n          top = _this$boundingRect.top,\n          width = _this$boundingRect.width,\n          height = _this$boundingRect.height;\n      this.$emit('update:color', fromHSVA({\n        h: this.color.hue,\n        s: clamp(x - left, 0, width) / width,\n        v: 1 - clamp(y - top, 0, height) / height,\n        a: this.color.alpha\n      }));\n    },\n    updateCanvas: function updateCanvas() {\n      if (!this.color) return;\n      var canvas = this.$refs.canvas;\n      var ctx = canvas.getContext('2d');\n      if (!ctx) return;\n      var saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\n      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)'); // white\n\n      saturationGradient.addColorStop(1, \"hsla(\".concat(this.color.hue, \", 100%, 50%, 1)\"));\n      ctx.fillStyle = saturationGradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      var valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n      valueGradient.addColorStop(0, 'hsla(0, 0%, 100%, 0)'); // transparent\n\n      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)'); // black\n\n      ctx.fillStyle = valueGradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    },\n    handleClick: function handleClick(e) {\n      if (this.disabled) return;\n      this.boundingRect = this.$el.getBoundingClientRect();\n      this.emitColor(e.clientX, e.clientY);\n    },\n    handleMouseDown: function handleMouseDown(e) {\n      // To prevent selection while moving cursor\n      e.preventDefault();\n      if (this.disabled) return;\n      this.boundingRect = this.$el.getBoundingClientRect();\n      window.addEventListener('mousemove', this.handleMouseMove);\n      window.addEventListener('mouseup', this.handleMouseUp);\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      if (this.disabled) return;\n      this.emitColor(e.clientX, e.clientY);\n    },\n    handleMouseUp: function handleMouseUp() {\n      window.removeEventListener('mousemove', this.handleMouseMove);\n      window.removeEventListener('mouseup', this.handleMouseUp);\n    },\n    genCanvas: function genCanvas() {\n      return this.$createElement('canvas', {\n        ref: 'canvas',\n        attrs: {\n          width: this.width,\n          height: this.height\n        }\n      });\n    },\n    genDot: function genDot() {\n      var radius = parseInt(this.dotSize, 10) / 2;\n      var x = convertToUnit(this.dot.x - radius);\n      var y = convertToUnit(this.dot.y - radius);\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__canvas-dot',\n        class: {\n          'v-color-picker__canvas-dot--disabled': this.disabled\n        },\n        style: {\n          width: convertToUnit(this.dotSize),\n          height: convertToUnit(this.dotSize),\n          transform: \"translate(\".concat(x, \", \").concat(y, \")\")\n        }\n      });\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-color-picker__canvas',\n      style: {\n        width: convertToUnit(this.width),\n        height: convertToUnit(this.height)\n      },\n      on: {\n        click: this.handleClick,\n        mousedown: this.handleMouseDown\n      }\n    }, [this.genCanvas(), this.genDot()]);\n  }\n});",{"version":3,"sources":["../../../src/components/VColorPicker/VColorPickerCanvas.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VColorPickerCanvas.sass'\n\n// Helpers\nimport { clamp, convertToUnit } from '../../util/helpers'\nimport { fromHSVA, VColorPickerColor, fromRGBA } from './util'\n\n// Types\nimport Vue, { VNode, PropType } from 'vue'\n\nexport default Vue.extend({\n  name: 'v-color-picker-canvas',\n\n  props: {\n    color: {\n      type: Object as PropType<VColorPickerColor>,\n      default: () => fromRGBA({ r: 255, g: 0, b: 0, a: 1 }),\n    },\n    disabled: Boolean,\n    dotSize: {\n      type: [Number, String],\n      default: 10,\n    },\n    height: {\n      type: [Number, String],\n      default: 150,\n    },\n    width: {\n      type: [Number, String],\n      default: 300,\n    },\n  },\n\n  data () {\n    return {\n      boundingRect: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0,\n      } as ClientRect,\n    }\n  },\n\n  computed: {\n    dot (): { x: number, y: number} {\n      if (!this.color) return { x: 0, y: 0 }\n\n      return {\n        x: this.color.hsva.s * parseInt(this.width, 10),\n        y: (1 - this.color.hsva.v) * parseInt(this.height, 10),\n      }\n    },\n  },\n\n  watch: {\n    'color.hue': 'updateCanvas',\n  },\n\n  mounted () {\n    this.updateCanvas()\n  },\n\n  methods: {\n    emitColor (x: number, y: number) {\n      const { left, top, width, height } = this.boundingRect\n\n      this.$emit('update:color', fromHSVA({\n        h: this.color.hue,\n        s: clamp(x - left, 0, width) / width,\n        v: 1 - clamp(y - top, 0, height) / height,\n        a: this.color.alpha,\n      }))\n    },\n    updateCanvas () {\n      if (!this.color) return\n\n      const canvas = this.$refs.canvas as HTMLCanvasElement\n      const ctx = canvas.getContext('2d')\n\n      if (!ctx) return\n\n      const saturationGradient = ctx.createLinearGradient(0, 0, canvas.width, 0)\n      saturationGradient.addColorStop(0, 'hsla(0, 0%, 100%, 1)') // white\n      saturationGradient.addColorStop(1, `hsla(${this.color.hue}, 100%, 50%, 1)`)\n      ctx.fillStyle = saturationGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n\n      const valueGradient = ctx.createLinearGradient(0, 0, 0, canvas.height)\n      valueGradient.addColorStop(0, 'hsla(0, 0%, 100%, 0)') // transparent\n      valueGradient.addColorStop(1, 'hsla(0, 0%, 0%, 1)') // black\n      ctx.fillStyle = valueGradient\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\n    },\n    handleClick (e: MouseEvent) {\n      if (this.disabled) return\n\n      this.boundingRect = this.$el.getBoundingClientRect()\n      this.emitColor(e.clientX, e.clientY)\n    },\n    handleMouseDown (e: MouseEvent) {\n      // To prevent selection while moving cursor\n      e.preventDefault()\n\n      if (this.disabled) return\n\n      this.boundingRect = this.$el.getBoundingClientRect()\n\n      window.addEventListener('mousemove', this.handleMouseMove)\n      window.addEventListener('mouseup', this.handleMouseUp)\n    },\n    handleMouseMove (e: MouseEvent) {\n      if (this.disabled) return\n\n      this.emitColor(e.clientX, e.clientY)\n    },\n    handleMouseUp () {\n      window.removeEventListener('mousemove', this.handleMouseMove)\n      window.removeEventListener('mouseup', this.handleMouseUp)\n    },\n    genCanvas (): VNode {\n      return this.$createElement('canvas', {\n        ref: 'canvas',\n        attrs: {\n          width: this.width,\n          height: this.height,\n        },\n      })\n    },\n    genDot (): VNode {\n      const radius = parseInt(this.dotSize, 10) / 2\n      const x = convertToUnit(this.dot.x - radius)\n      const y = convertToUnit(this.dot.y - radius)\n\n      return this.$createElement('div', {\n        staticClass: 'v-color-picker__canvas-dot',\n        class: {\n          'v-color-picker__canvas-dot--disabled': this.disabled,\n        },\n        style: {\n          width: convertToUnit(this.dotSize),\n          height: convertToUnit(this.dotSize),\n          transform: `translate(${x}, ${y})`,\n        },\n      })\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-color-picker__canvas',\n      style: {\n        width: convertToUnit(this.width),\n        height: convertToUnit(this.height),\n      },\n      on: {\n        click: this.handleClick,\n        mousedown: this.handleMouseDown,\n      },\n    }, [\n      this.genCanvas(),\n      this.genDot(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}