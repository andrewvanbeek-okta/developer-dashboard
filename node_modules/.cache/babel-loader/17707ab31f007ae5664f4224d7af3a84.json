{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VTreeview/util/filterTreeItems.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VTreeview/util/filterTreeItems.js","mtime":1592873617820},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import { getObjectValueByPath } from \"../../../util/helpers\";\nexport function filterTreeItem(item, search, textKey) {\n  var text = getObjectValueByPath(item, textKey);\n  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1;\n}\nexport function filterTreeItems(filter, item, search, idKey, textKey, childrenKey, excluded) {\n  if (filter(item, search, textKey)) {\n    return true;\n  }\n\n  var children = getObjectValueByPath(item, childrenKey);\n\n  if (children) {\n    var match = false;\n\n    for (var i = 0; i < children.length; i++) {\n      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {\n        match = true;\n      }\n    }\n\n    if (match) return true;\n  }\n\n  excluded.add(getObjectValueByPath(item, idKey));\n  return false;\n}",{"version":3,"sources":["../../../../src/components/VTreeview/util/filterTreeItems.ts"],"names":[],"mappings":"AAAA,SAAA,oBAAA;AAGA,OAAM,SAAA,cAAA,CAAA,IAAA,EAAA,MAAA,EAAA,OAAA,EAAuE;AAC3E,MAAM,IAAI,GAAG,oBAAoB,CAAA,IAAA,EAAjC,OAAiC,CAAjC;AAEA,SAAO,IAAI,CAAJ,iBAAA,GAAA,OAAA,CAAiC,MAAM,CAAvC,iBAAiC,EAAjC,IAA+D,CAAtE,CAAA;AACD;AAED,OAAM,SAAA,eAAA,CAAA,MAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,WAAA,EAAA,QAAA,EAO0B;AAE9B,MAAI,MAAM,CAAA,IAAA,EAAA,MAAA,EAAV,OAAU,CAAV,EAAmC;AACjC,WAAA,IAAA;AACD;;AAED,MAAM,QAAQ,GAAG,oBAAoB,CAAA,IAAA,EAArC,WAAqC,CAArC;;AAEA,MAAA,QAAA,EAAc;AACZ,QAAI,KAAK,GAAT,KAAA;;AACA,SAAK,IAAI,CAAC,GAAV,CAAA,EAAgB,CAAC,GAAG,QAAQ,CAA5B,MAAA,EAAqC,CAArC,EAAA,EAA0C;AACxC,UAAI,eAAe,CAAA,MAAA,EAAS,QAAQ,CAAjB,CAAiB,CAAjB,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,WAAA,EAAnB,QAAmB,CAAnB,EAAyF;AACvF,QAAA,KAAK,GAAL,IAAA;AACD;AACF;;AAED,QAAA,KAAA,EAAW,OAAA,IAAA;AACZ;;AAED,EAAA,QAAQ,CAAR,GAAA,CAAa,oBAAoB,CAAA,IAAA,EAAjC,KAAiC,CAAjC;AAEA,SAAA,KAAA;AACD","sourcesContent":["import { getObjectValueByPath } from '../../../util/helpers'\nimport { TreeviewItemFunction } from 'types'\n\nexport function filterTreeItem (item: object, search: string, textKey: string): boolean {\n  const text = getObjectValueByPath(item, textKey)\n\n  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1\n}\n\nexport function filterTreeItems (\n  filter: TreeviewItemFunction,\n  item: any,\n  search: string,\n  idKey: string,\n  textKey: string,\n  childrenKey: string,\n  excluded: Set<string | number>\n): boolean {\n  if (filter(item, search, textKey)) {\n    return true\n  }\n\n  const children = getObjectValueByPath(item, childrenKey)\n\n  if (children) {\n    let match = false\n    for (let i = 0; i < children.length; i++) {\n      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {\n        match = true\n      }\n    }\n\n    if (match) return true\n  }\n\n  excluded.add(getObjectValueByPath(item, idKey))\n\n  return false\n}\n"],"sourceRoot":""}]}