{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/math.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/math.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function int(value) {\n  return parseInt(value, 10);\n}\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\n\n\nexport function checkCollinear(p0, p1, p2) {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y);\n}\nexport function getDistance(p1, p2) {\n  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n}\nexport function moveTo(to, from, radius) {\n  var vector = {\n    x: to.x - from.x,\n    y: to.y - from.y\n  };\n  var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  var unitVector = {\n    x: vector.x / length,\n    y: vector.y / length\n  };\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius\n  };\n}",{"version":3,"sources":["../../../../src/components/VSparkline/helpers/math.ts"],"names":[],"mappings":"AAEA,SAAA,GAAA,CAAA,KAAA,EAAoC;AAClC,SAAO,QAAQ,CAAA,KAAA,EAAf,EAAe,CAAf;AACD;AAED;;;;;;;AAKA,OAAM,SAAA,cAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAyD;AAC7D,SAAO,GAAG,CAAC,EAAE,CAAF,CAAA,GAAO,EAAE,CAAb,CAAG,CAAH,KAAqB,GAAG,CAAC,IAAI,EAAE,CAA/B,CAAwB,CAAxB,IAAsC,GAAG,CAAC,EAAE,CAAF,CAAA,GAAO,EAAE,CAAb,CAAG,CAAH,KAAqB,GAAG,CAAC,IAAI,EAAE,CAA5E,CAAqE,CAArE;AACD;AAED,OAAM,SAAA,WAAA,CAAA,EAAA,EAAA,EAAA,EAA2C;AAC/C,SAAO,IAAI,CAAJ,IAAA,CACL,IAAI,CAAJ,GAAA,CAAS,EAAE,CAAF,CAAA,GAAO,EAAE,CAAlB,CAAA,EAAA,CAAA,IAA2B,IAAI,CAAJ,GAAA,CAAS,EAAE,CAAF,CAAA,GAAO,EAAE,CAAlB,CAAA,EAD7B,CAC6B,CADtB,CAAP;AAGD;AAED,OAAM,SAAA,MAAA,CAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAwD;AAC5D,MAAM,MAAM,GAAG;AAAE,IAAA,CAAC,EAAE,EAAE,CAAF,CAAA,GAAO,IAAI,CAAhB,CAAA;AAAoB,IAAA,CAAC,EAAE,EAAE,CAAF,CAAA,GAAO,IAAI,CAAC;AAAnC,GAAf;AACA,MAAM,MAAM,GAAG,IAAI,CAAJ,IAAA,CAAW,MAAM,CAAN,CAAA,GAAW,MAAM,CAAlB,CAAC,GAAwB,MAAM,CAAN,CAAA,GAAW,MAAM,CAAnE,CAAe,CAAf;AACA,MAAM,UAAU,GAAG;AAAE,IAAA,CAAC,EAAE,MAAM,CAAN,CAAA,GAAL,MAAA;AAAwB,IAAA,CAAC,EAAE,MAAM,CAAN,CAAA,GAAW;AAAtC,GAAnB;AAEA,SAAO;AACL,IAAA,CAAC,EAAE,IAAI,CAAJ,CAAA,GAAS,UAAU,CAAV,CAAA,GADP,MAAA;AAEL,IAAA,CAAC,EAAE,IAAI,CAAJ,CAAA,GAAS,UAAU,CAAV,CAAA,GAAe;AAFtB,GAAP;AAID","sourcesContent":["import { Point } from '../VSparkline'\n\nfunction int (value: string | number): number {\n  return parseInt(value, 10)\n}\n\n/**\n * https://en.wikipedia.org/wiki/Collinearity\n * x=(x1+x2)/2\n * y=(y1+y2)/2\n */\nexport function checkCollinear (p0: Point, p1: Point, p2: Point): boolean {\n  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y)\n}\n\nexport function getDistance (p1: Point, p2: Point): number {\n  return Math.sqrt(\n    Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2)\n  )\n}\n\nexport function moveTo (to: Point, from: Point, radius: number) {\n  const vector = { x: to.x - from.x, y: to.y - from.y }\n  const length = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y))\n  const unitVector = { x: vector.x / length, y: vector.y / length }\n\n  return {\n    x: from.x + unitVector.x * radius,\n    y: from.y + unitVector.y * radius,\n  }\n}\n"],"sourceRoot":""}]}