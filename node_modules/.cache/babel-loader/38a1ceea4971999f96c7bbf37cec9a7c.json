{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/elevatable/index.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/elevatable/index.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.number.constructor\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'elevatable',\n  props: {\n    elevation: [Number, String]\n  },\n  computed: {\n    computedElevation: function computedElevation() {\n      return this.elevation;\n    },\n    elevationClasses: function elevationClasses() {\n      var elevation = this.computedElevation;\n      if (elevation == null) return {};\n      if (isNaN(parseInt(elevation))) return {};\n      return _defineProperty({}, \"elevation-\".concat(this.elevation), true);\n    }\n  }\n});",{"version":3,"sources":["../../../src/mixins/elevatable/index.ts"],"names":[],"mappings":";;AAAA,OAAA,GAAA,MAAA,KAAA;AAEA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,YAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,SAAS,EAAE,CAAA,MAAA,EAAA,MAAA;AADN,GAHiB;AAOxB,EAAA,QAAQ,EAAE;AACR,IAAA,iBADQ,+BACS;AACf,aAAO,KAAP,SAAA;AAFM,KAAA;AAIR,IAAA,gBAJQ,8BAIQ;AACd,UAAM,SAAS,GAAG,KAAlB,iBAAA;AAEA,UAAI,SAAS,IAAb,IAAA,EAAuB,OAAA,EAAA;AACvB,UAAI,KAAK,CAAC,QAAQ,CAAlB,SAAkB,CAAT,CAAT,EAAgC,OAAA,EAAA;AAChC,qDAAuB,KAAd,SAAT,GAA0C,IAA1C;AACD;AAVO;AAPc,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'elevatable',\n\n  props: {\n    elevation: [Number, String],\n  },\n\n  computed: {\n    computedElevation (): string | number | undefined {\n      return this.elevation\n    },\n    elevationClasses (): Record<string, boolean> {\n      const elevation = this.computedElevation\n\n      if (elevation == null) return {}\n      if (isNaN(parseInt(elevation))) return {}\n      return { [`elevation-${this.elevation}`]: true }\n    },\n  },\n})\n"],"sourceRoot":""}]}