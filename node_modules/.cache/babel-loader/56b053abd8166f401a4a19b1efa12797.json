{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VDataTable/Row.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VDataTable/Row.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/maxpollard/developer-dashboard/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n// Types\nimport Vue from 'vue'; // Utils\n\nimport { getObjectValueByPath } from \"../../util/helpers\";\nexport default Vue.extend({\n  name: 'row',\n  functional: true,\n  props: {\n    headers: Array,\n    item: Object,\n    rtl: Boolean\n  },\n  render: function render(h, _ref) {\n    var props = _ref.props,\n        slots = _ref.slots,\n        data = _ref.data;\n    var computedSlots = slots();\n    var columns = props.headers.map(function (header) {\n      var _class;\n\n      var children = [];\n      var value = getObjectValueByPath(props.item, header.value);\n      var slotName = header.value;\n      var scopedSlot = data.scopedSlots && data.scopedSlots[slotName];\n      var regularSlot = computedSlots[slotName];\n\n      if (scopedSlot) {\n        children.push(scopedSlot({\n          item: props.item,\n          header: header,\n          value: value\n        }));\n      } else if (regularSlot) {\n        children.push(regularSlot);\n      } else {\n        children.push(value == null ? value : String(value));\n      }\n\n      var textAlign = \"text-\".concat(header.align || 'start');\n      return h('td', {\n        class: (_class = {}, _defineProperty(_class, textAlign, true), _defineProperty(_class, 'v-data-table__divider', header.divider), _class)\n      }, children);\n    });\n    return h('tr', data, columns);\n  }\n});",{"version":3,"sources":["../../../src/components/VDataTable/Row.ts"],"names":[],"mappings":";AAAA;AACA,OAAA,GAAA,MAAA,KAAA,C,CAGA;;AACA,SAAA,oBAAA;AAEA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,KAAA;AAGxB,EAAA,UAAU,EAHc,IAAA;AAKxB,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EADF,KAAA;AAEL,IAAA,IAAI,EAFC,MAAA;AAGL,IAAA,GAAG,EAAE;AAHA,GALiB;AAWxB,EAAA,MAXwB,kBAWlB,CAXkB,QAWS;AAAA,QAAtB,KAAsB,QAAtB,KAAsB;AAAA,QAAtB,KAAsB,QAAtB,KAAsB;AAAA,QAAN,IAAM,QAAN,IAAM;AAC/B,QAAM,aAAa,GAAG,KAAtB,EAAA;AAEA,QAAM,OAAO,GAAY,KAAK,CAAL,OAAA,CAAA,GAAA,CAAmB,UAAA,MAAD,EAA4B;AAAA;;AACrE,UAAM,QAAQ,GAAd,EAAA;AACA,UAAM,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAN,IAAA,EAAa,MAAM,CAArD,KAAkC,CAAlC;AAEA,UAAM,QAAQ,GAAG,MAAM,CAAvB,KAAA;AACA,UAAM,UAAU,GAAG,IAAI,CAAJ,WAAA,IAAoB,IAAI,CAAJ,WAAA,CAAvC,QAAuC,CAAvC;AACA,UAAM,WAAW,GAAG,aAAa,CAAjC,QAAiC,CAAjC;;AAEA,UAAA,UAAA,EAAgB;AACd,QAAA,QAAQ,CAAR,IAAA,CAAc,UAAU,CAAC;AAAE,UAAA,IAAI,EAAE,KAAK,CAAb,IAAA;AAAoB,UAAA,MAApB,EAAoB,MAApB;AAA4B,UAAA,KAAA,EAAA;AAA5B,SAAD,CAAxB;AADF,OAAA,MAEO,IAAA,WAAA,EAAiB;AACtB,QAAA,QAAQ,CAAR,IAAA,CAAA,WAAA;AADK,OAAA,MAEA;AACL,QAAA,QAAQ,CAAR,IAAA,CAAc,KAAK,IAAL,IAAA,GAAA,KAAA,GAAwB,MAAM,CAA5C,KAA4C,CAA5C;AACD;;AAED,UAAM,SAAS,kBAAW,MAAM,CAAN,KAAA,IAA1B,OAAe,CAAf;AAEA,aAAO,CAAC,CAAA,IAAA,EAAO;AACb,QAAA,KAAK,wCACH,SADG,EAAE,IAAF,2BAEH,uBAFG,EAEsB,MAAM,CAAC,OAF7B;AADQ,OAAP,EAAR,QAAQ,CAAR;AAlBF,KAAyB,CAAzB;AA0BA,WAAO,CAAC,CAAA,IAAA,EAAA,IAAA,EAAR,OAAQ,CAAR;AACD;AAzCuB,CAAX,CAAf","sourcesContent":["// Types\nimport Vue, { VNode, PropType } from 'vue'\nimport { DataTableHeader } from 'types'\n\n// Utils\nimport { getObjectValueByPath } from '../../util/helpers'\n\nexport default Vue.extend({\n  name: 'row',\n\n  functional: true,\n\n  props: {\n    headers: Array as PropType<DataTableHeader[]>,\n    item: Object,\n    rtl: Boolean,\n  },\n\n  render (h, { props, slots, data }): VNode {\n    const computedSlots = slots()\n\n    const columns: VNode[] = props.headers.map((header: DataTableHeader) => {\n      const children = []\n      const value = getObjectValueByPath(props.item, header.value)\n\n      const slotName = header.value\n      const scopedSlot = data.scopedSlots && data.scopedSlots[slotName]\n      const regularSlot = computedSlots[slotName]\n\n      if (scopedSlot) {\n        children.push(scopedSlot({ item: props.item, header, value }))\n      } else if (regularSlot) {\n        children.push(regularSlot)\n      } else {\n        children.push(value == null ? value : String(value))\n      }\n\n      const textAlign = `text-${header.align || 'start'}`\n\n      return h('td', {\n        class: {\n          [textAlign]: true,\n          'v-data-table__divider': header.divider,\n        },\n      }, children)\n    })\n\n    return h('tr', data, columns)\n  },\n})\n"],"sourceRoot":""}]}