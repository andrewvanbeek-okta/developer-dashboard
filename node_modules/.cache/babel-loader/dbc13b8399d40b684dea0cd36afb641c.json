{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/services/theme/index.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/services/theme/index.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport \"core-js/modules/es6.array.find\";\nimport _classCallCheck from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _inherits from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from \"../service\"; // Utilities\n\nimport * as ThemeUtils from \"./utils\"; // Types\n\nimport Vue from 'vue';\nexport var Theme = /*#__PURE__*/function (_Service) {\n  _inherits(Theme, _Service);\n\n  var _super = _createSuper(Theme);\n\n  function Theme(preset) {\n    var _this;\n\n    _classCallCheck(this, Theme);\n\n    _this = _super.call(this);\n    _this.disabled = false;\n    _this.isDark = null;\n    _this.vueInstance = null;\n    _this.vueMeta = null;\n    var _preset$Theme$propert = preset[Theme.property],\n        dark = _preset$Theme$propert.dark,\n        disable = _preset$Theme$propert.disable,\n        options = _preset$Theme$propert.options,\n        themes = _preset$Theme$propert.themes;\n    _this.dark = Boolean(dark);\n    _this.defaults = _this.themes = themes;\n    _this.options = options;\n\n    if (disable) {\n      _this.disabled = true;\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this.themes = {\n      dark: _this.fillVariant(themes.dark, true),\n      light: _this.fillVariant(themes.light, false)\n    };\n    return _this;\n  } // When setting css, check for element\n  // and apply new values\n\n\n  _createClass(Theme, [{\n    key: \"applyTheme\",\n    // Apply current theme default\n    // only called on client side\n    value: function applyTheme() {\n      if (this.disabled) return this.clearCss();\n      this.css = this.generatedStyles;\n    }\n  }, {\n    key: \"clearCss\",\n    value: function clearCss() {\n      this.css = '';\n    } // Initialize theme for SSR and SPA\n    // Attach to ssrContext head or\n    // apply new theme to document\n\n  }, {\n    key: \"init\",\n    value: function init(root, ssrContext) {\n      if (this.disabled) return;\n      /* istanbul ignore else */\n\n      if (root.$meta) {\n        this.initVueMeta(root);\n      } else if (ssrContext) {\n        this.initSSR(ssrContext);\n      }\n\n      this.initTheme();\n    } // Allows for you to set target theme\n\n  }, {\n    key: \"setTheme\",\n    value: function setTheme(theme, value) {\n      this.themes[theme] = Object.assign(this.themes[theme], value);\n      this.applyTheme();\n    } // Reset theme defaults\n\n  }, {\n    key: \"resetThemes\",\n    value: function resetThemes() {\n      this.themes.light = Object.assign({}, this.defaults.light);\n      this.themes.dark = Object.assign({}, this.defaults.dark);\n      this.applyTheme();\n    } // Check for existence of style element\n\n  }, {\n    key: \"checkOrCreateStyleElement\",\n    value: function checkOrCreateStyleElement() {\n      this.styleEl = document.getElementById('vuetify-theme-stylesheet');\n      /* istanbul ignore next */\n\n      if (this.styleEl) return true;\n      this.genStyleElement(); // If doesn't have it, create it\n\n      return Boolean(this.styleEl);\n    }\n  }, {\n    key: \"fillVariant\",\n    value: function fillVariant() {\n      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var dark = arguments.length > 1 ? arguments[1] : undefined;\n      var defaultTheme = this.themes[dark ? 'dark' : 'light'];\n      return Object.assign({}, defaultTheme, theme);\n    } // Generate the style element\n    // if applicable\n\n  }, {\n    key: \"genStyleElement\",\n    value: function genStyleElement() {\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') return;\n      /* istanbul ignore next */\n\n      var options = this.options || {};\n      this.styleEl = document.createElement('style');\n      this.styleEl.type = 'text/css';\n      this.styleEl.id = 'vuetify-theme-stylesheet';\n\n      if (options.cspNonce) {\n        this.styleEl.setAttribute('nonce', options.cspNonce);\n      }\n\n      document.head.appendChild(this.styleEl);\n    }\n  }, {\n    key: \"initVueMeta\",\n    value: function initVueMeta(root) {\n      var _this2 = this;\n\n      this.vueMeta = root.$meta();\n\n      if (this.isVueMeta23) {\n        // vue-meta needs to apply after mounted()\n        root.$nextTick(function () {\n          _this2.applyVueMeta23();\n        });\n        return;\n      }\n\n      var metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo';\n      var metaInfo = root.$options[metaKeyName] || {};\n\n      root.$options[metaKeyName] = function () {\n        metaInfo.style = metaInfo.style || [];\n        var vuetifyStylesheet = metaInfo.style.find(function (s) {\n          return s.id === 'vuetify-theme-stylesheet';\n        });\n\n        if (!vuetifyStylesheet) {\n          metaInfo.style.push({\n            cssText: _this2.generatedStyles,\n            type: 'text/css',\n            id: 'vuetify-theme-stylesheet',\n            nonce: (_this2.options || {}).cspNonce\n          });\n        } else {\n          vuetifyStylesheet.cssText = _this2.generatedStyles;\n        }\n\n        return metaInfo;\n      };\n    }\n  }, {\n    key: \"applyVueMeta23\",\n    value: function applyVueMeta23() {\n      var _this$vueMeta$addApp = this.vueMeta.addApp('vuetify'),\n          set = _this$vueMeta$addApp.set;\n\n      set({\n        style: [{\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce\n        }]\n      });\n    }\n  }, {\n    key: \"initSSR\",\n    value: function initSSR(ssrContext) {\n      var options = this.options || {}; // SSR\n\n      var nonce = options.cspNonce ? \" nonce=\\\"\".concat(options.cspNonce, \"\\\"\") : '';\n      ssrContext.head = ssrContext.head || '';\n      ssrContext.head += \"<style type=\\\"text/css\\\" id=\\\"vuetify-theme-stylesheet\\\"\".concat(nonce, \">\").concat(this.generatedStyles, \"</style>\");\n    }\n  }, {\n    key: \"initTheme\",\n    value: function initTheme() {\n      var _this3 = this;\n\n      // Only watch for reactivity on client side\n      if (typeof document === 'undefined') return; // If we get here somehow, ensure\n      // existing instance is removed\n\n      if (this.vueInstance) this.vueInstance.$destroy(); // Use Vue instance to track reactivity\n      // TODO: Update to use RFC if merged\n      // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n\n      this.vueInstance = new Vue({\n        data: {\n          themes: this.themes\n        },\n        watch: {\n          themes: {\n            immediate: true,\n            deep: true,\n            handler: function handler() {\n              return _this3.applyTheme();\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"css\",\n    set: function set(val) {\n      if (this.vueMeta) {\n        if (this.isVueMeta23) {\n          this.applyVueMeta23();\n        }\n\n        return;\n      }\n\n      this.checkOrCreateStyleElement() && (this.styleEl.innerHTML = val);\n    }\n  }, {\n    key: \"dark\",\n    set: function set(val) {\n      var oldDark = this.isDark;\n      this.isDark = val; // Only apply theme after dark\n      // has already been set before\n\n      oldDark != null && this.applyTheme();\n    },\n    get: function get() {\n      return Boolean(this.isDark);\n    }\n  }, {\n    key: \"currentTheme\",\n    get: function get() {\n      var target = this.dark ? 'dark' : 'light';\n      return this.themes[target];\n    }\n  }, {\n    key: \"generatedStyles\",\n    get: function get() {\n      var theme = this.parsedTheme;\n      /* istanbul ignore next */\n\n      var options = this.options || {};\n      var css;\n\n      if (options.themeCache != null) {\n        css = options.themeCache.get(theme);\n        /* istanbul ignore if */\n\n        if (css != null) return css;\n      }\n\n      css = ThemeUtils.genStyles(theme, options.customProperties);\n\n      if (options.minifyTheme != null) {\n        css = options.minifyTheme(css);\n      }\n\n      if (options.themeCache != null) {\n        options.themeCache.set(theme, css);\n      }\n\n      return css;\n    }\n  }, {\n    key: \"parsedTheme\",\n    get: function get() {\n      /* istanbul ignore next */\n      var theme = this.currentTheme || {};\n      return ThemeUtils.parse(theme);\n    } // Is using v2.3 of vue-meta\n    // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n\n  }, {\n    key: \"isVueMeta23\",\n    get: function get() {\n      return typeof this.vueMeta.addApp === 'function';\n    }\n  }]);\n\n  return Theme;\n}(Service);\nTheme.property = 'theme';",{"version":3,"sources":["../../../src/services/theme/index.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-multi-spaces */\n// Extensions\nimport { Service } from '../service'\n\n// Utilities\nimport * as ThemeUtils from './utils'\n\n// Types\nimport Vue from 'vue'\nimport { VuetifyPreset } from 'vuetify/types/services/presets'\nimport {\n  VuetifyParsedTheme,\n  VuetifyThemes,\n  VuetifyThemeVariant,\n  Theme as ITheme,\n} from 'vuetify/types/services/theme'\n\nexport class Theme extends Service {\n  static property: 'theme' = 'theme'\n\n  public disabled = false\n\n  public options: ITheme['options']\n\n  public styleEl?: HTMLStyleElement\n\n  public themes: VuetifyThemes\n\n  public defaults: VuetifyThemes\n\n  private isDark = null as boolean | null\n\n  private vueInstance = null as Vue | null\n\n  private vueMeta = null as any | null\n\n  constructor (preset: VuetifyPreset) {\n    super()\n\n    const {\n      dark,\n      disable,\n      options,\n      themes,\n    } = preset[Theme.property]\n\n    this.dark = Boolean(dark)\n    this.defaults = this.themes = themes\n    this.options = options\n\n    if (disable) {\n      this.disabled = true\n\n      return\n    }\n\n    this.themes = {\n      dark: this.fillVariant(themes.dark, true),\n      light: this.fillVariant(themes.light, false),\n    }\n  }\n\n  // When setting css, check for element\n  // and apply new values\n  set css (val: string) {\n    if (this.vueMeta) {\n      if (this.isVueMeta23) {\n        this.applyVueMeta23()\n      }\n      return\n    }\n    this.checkOrCreateStyleElement() && (this.styleEl!.innerHTML = val)\n  }\n\n  set dark (val: boolean) {\n    const oldDark = this.isDark\n\n    this.isDark = val\n    // Only apply theme after dark\n    // has already been set before\n    oldDark != null && this.applyTheme()\n  }\n\n  get dark () {\n    return Boolean(this.isDark)\n  }\n\n  // Apply current theme default\n  // only called on client side\n  public applyTheme (): void {\n    if (this.disabled) return this.clearCss()\n\n    this.css = this.generatedStyles\n  }\n\n  public clearCss (): void {\n    this.css = ''\n  }\n\n  // Initialize theme for SSR and SPA\n  // Attach to ssrContext head or\n  // apply new theme to document\n  public init (root: Vue, ssrContext?: any): void {\n    if (this.disabled) return\n\n    /* istanbul ignore else */\n    if ((root as any).$meta) {\n      this.initVueMeta(root)\n    } else if (ssrContext) {\n      this.initSSR(ssrContext)\n    }\n\n    this.initTheme()\n  }\n\n  // Allows for you to set target theme\n  public setTheme (theme: 'light' | 'dark', value: object) {\n    this.themes[theme] = Object.assign(this.themes[theme], value)\n    this.applyTheme()\n  }\n\n  // Reset theme defaults\n  public resetThemes () {\n    this.themes.light = Object.assign({}, this.defaults.light)\n    this.themes.dark = Object.assign({}, this.defaults.dark)\n    this.applyTheme()\n  }\n\n  // Check for existence of style element\n  private checkOrCreateStyleElement (): boolean {\n    this.styleEl = document.getElementById('vuetify-theme-stylesheet') as HTMLStyleElement\n\n    /* istanbul ignore next */\n    if (this.styleEl) return true\n\n    this.genStyleElement() // If doesn't have it, create it\n\n    return Boolean(this.styleEl)\n  }\n\n  private fillVariant (\n    theme: Partial<VuetifyThemeVariant> = {},\n    dark: boolean\n  ): VuetifyThemeVariant {\n    const defaultTheme = this.themes[dark ? 'dark' : 'light']\n\n    return Object.assign({},\n      defaultTheme,\n      theme\n    )\n  }\n\n  // Generate the style element\n  // if applicable\n  private genStyleElement (): void {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') return\n\n    /* istanbul ignore next */\n    const options = this.options || {}\n\n    this.styleEl = document.createElement('style')\n    this.styleEl.type = 'text/css'\n    this.styleEl.id = 'vuetify-theme-stylesheet'\n\n    if (options.cspNonce) {\n      this.styleEl.setAttribute('nonce', options.cspNonce)\n    }\n\n    document.head.appendChild(this.styleEl)\n  }\n\n  private initVueMeta (root: any) {\n    this.vueMeta = root.$meta()\n    if (this.isVueMeta23) {\n      // vue-meta needs to apply after mounted()\n      root.$nextTick(() => {\n        this.applyVueMeta23()\n      })\n      return\n    }\n\n    const metaKeyName = typeof this.vueMeta.getOptions === 'function' ? this.vueMeta.getOptions().keyName : 'metaInfo'\n    const metaInfo = root.$options[metaKeyName] || {}\n\n    root.$options[metaKeyName] = () => {\n      metaInfo.style = metaInfo.style || []\n\n      const vuetifyStylesheet = metaInfo.style.find((s: any) => s.id === 'vuetify-theme-stylesheet')\n\n      if (!vuetifyStylesheet) {\n        metaInfo.style.push({\n          cssText: this.generatedStyles,\n          type: 'text/css',\n          id: 'vuetify-theme-stylesheet',\n          nonce: (this.options || {}).cspNonce,\n        })\n      } else {\n        vuetifyStylesheet.cssText = this.generatedStyles\n      }\n\n      return metaInfo\n    }\n  }\n\n  private applyVueMeta23 () {\n    const { set } = this.vueMeta.addApp('vuetify')\n\n    set({\n      style: [{\n        cssText: this.generatedStyles,\n        type: 'text/css',\n        id: 'vuetify-theme-stylesheet',\n        nonce: (this.options || {}).cspNonce,\n      }],\n    })\n  }\n\n  private initSSR (ssrContext?: any) {\n    const options = this.options || {}\n    // SSR\n    const nonce = options.cspNonce ? ` nonce=\"${options.cspNonce}\"` : ''\n    ssrContext.head = ssrContext.head || ''\n    ssrContext.head += `<style type=\"text/css\" id=\"vuetify-theme-stylesheet\"${nonce}>${this.generatedStyles}</style>`\n  }\n\n  private initTheme () {\n    // Only watch for reactivity on client side\n    if (typeof document === 'undefined') return\n\n    // If we get here somehow, ensure\n    // existing instance is removed\n    if (this.vueInstance) this.vueInstance.$destroy()\n\n    // Use Vue instance to track reactivity\n    // TODO: Update to use RFC if merged\n    // https://github.com/vuejs/rfcs/blob/advanced-reactivity-api/active-rfcs/0000-advanced-reactivity-api.md\n    this.vueInstance = new Vue({\n      data: { themes: this.themes },\n\n      watch: {\n        themes: {\n          immediate: true,\n          deep: true,\n          handler: () => this.applyTheme(),\n        },\n      },\n    })\n  }\n\n  get currentTheme () {\n    const target = this.dark ? 'dark' : 'light'\n\n    return this.themes[target]\n  }\n\n  get generatedStyles (): string {\n    const theme = this.parsedTheme\n    /* istanbul ignore next */\n    const options = this.options || {}\n    let css\n\n    if (options.themeCache != null) {\n      css = options.themeCache.get(theme)\n      /* istanbul ignore if */\n      if (css != null) return css\n    }\n\n    css = ThemeUtils.genStyles(theme, options.customProperties)\n\n    if (options.minifyTheme != null) {\n      css = options.minifyTheme(css)\n    }\n\n    if (options.themeCache != null) {\n      options.themeCache.set(theme, css)\n    }\n\n    return css\n  }\n\n  get parsedTheme (): VuetifyParsedTheme {\n    /* istanbul ignore next */\n    const theme = this.currentTheme || {}\n    return ThemeUtils.parse(theme)\n  }\n\n  // Is using v2.3 of vue-meta\n  // https://github.com/nuxt/vue-meta/releases/tag/v2.3.0\n  private get isVueMeta23 (): boolean {\n    return typeof this.vueMeta.addApp === 'function'\n  }\n}\n"],"sourceRoot":""}]}