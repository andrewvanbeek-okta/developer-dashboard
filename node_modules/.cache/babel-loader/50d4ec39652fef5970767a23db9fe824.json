{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VCalendar/modes/column.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VCalendar/modes/column.js","mtime":1592873617730},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport { getOverlapGroupHandler } from \"./common\";\nvar FULL_WIDTH = 100;\nexport var column = function column(events, firstWeekday, overlapThreshold) {\n  var handler = getOverlapGroupHandler(firstWeekday);\n  return function (day, dayEvents, timed) {\n    var visuals = handler.getVisuals(day, dayEvents, timed);\n\n    if (timed) {\n      visuals.forEach(function (visual) {\n        visual.left = visual.column * FULL_WIDTH / visual.columnCount;\n        visual.width = FULL_WIDTH / visual.columnCount;\n      });\n    }\n\n    return visuals;\n  };\n};",{"version":3,"sources":["../../../../src/components/VCalendar/modes/column.ts"],"names":[],"mappings":";AACA,SAAA,sBAAA;AAEA,IAAM,UAAU,GAAhB,GAAA;AAEA,OAAO,IAAM,MAAM,GAA6B,SAAnC,MAAmC,CAAA,MAAA,EAAA,YAAA,EAAA,gBAAA,EAA2C;AACzF,MAAM,OAAO,GAAG,sBAAsB,CAAtC,YAAsC,CAAtC;AAEA,SAAO,UAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAA0B;AAC/B,QAAM,OAAO,GAAG,OAAO,CAAP,UAAA,CAAA,GAAA,EAAA,SAAA,EAAhB,KAAgB,CAAhB;;AAEA,QAAA,KAAA,EAAW;AACT,MAAA,OAAO,CAAP,OAAA,CAAgB,UAAA,MAAM,EAAG;AACvB,QAAA,MAAM,CAAN,IAAA,GAAc,MAAM,CAAN,MAAA,GAAA,UAAA,GAA6B,MAAM,CAAjD,WAAA;AACA,QAAA,MAAM,CAAN,KAAA,GAAe,UAAU,GAAG,MAAM,CAAlC,WAAA;AAFF,OAAA;AAID;;AAED,WAAA,OAAA;AAVF,GAAA;AAHK,CAAA","sourcesContent":["import { CalendarEventOverlapMode } from 'types'\nimport { getOverlapGroupHandler } from './common'\n\nconst FULL_WIDTH = 100\n\nexport const column: CalendarEventOverlapMode = (events, firstWeekday, overlapThreshold) => {\n  const handler = getOverlapGroupHandler(firstWeekday)\n\n  return (day, dayEvents, timed) => {\n    const visuals = handler.getVisuals(day, dayEvents, timed)\n\n    if (timed) {\n      visuals.forEach(visual => {\n        visual.left = visual.column * FULL_WIDTH / visual.columnCount\n        visual.width = FULL_WIDTH / visual.columnCount\n      })\n    }\n\n    return visuals\n  }\n}\n"],"sourceRoot":""}]}