{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/core.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VSparkline/helpers/core.js","mtime":1592873617800},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/andrewvanbeek/opa-dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nexport function genPoints(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  var gridX = (maxX - minX) / (totalValues - 1);\n  var gridY = (maxY - minY) / (maxValue - minValue || 1);\n  return values.map(function (value, index) {\n    return {\n      x: minX + index * gridX,\n      y: maxY - (value - minValue) * gridY + +(index === totalValues - 1) * 0.00001 - +(index === 0) * 0.00001,\n      value: value\n    };\n  });\n}\nexport function genBars(values, boundary) {\n  var minX = boundary.minX,\n      maxX = boundary.maxX,\n      minY = boundary.minY,\n      maxY = boundary.maxY;\n  var totalValues = values.length;\n  var maxValue = Math.max.apply(Math, _toConsumableArray(values));\n  var minValue = Math.min.apply(Math, _toConsumableArray(values));\n  if (minValue > 0) minValue = 0;\n  if (maxValue < 0) maxValue = 0;\n  var gridX = maxX / totalValues;\n  var gridY = (maxY - minY) / (maxValue - minValue);\n  var horizonY = maxY - Math.abs(minValue * gridY);\n  return values.map(function (value, index) {\n    var height = Math.abs(gridY * value);\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height + +(value < 0) * height,\n      height: height,\n      value: value\n    };\n  });\n}",{"version":3,"sources":["../../../../src/components/VSparkline/helpers/core.ts"],"names":[],"mappings":";AAEA,OAAM,SAAA,SAAA,CAAA,MAAA,EAAA,QAAA,EAEc;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEQ,IAFR,GAElB,QAFkB,CAEQ,IAFR;AAGlB,MAAM,WAAW,GAAG,MAAM,CAA1B,MAAA;AACA,MAAM,QAAQ,GAAG,IAAI,CAAJ,GAAA,OAAA,IAAI,qBAArB,MAAqB,EAArB;AACA,MAAM,QAAQ,GAAG,IAAI,CAAJ,GAAA,OAAA,IAAI,qBAArB,MAAqB,EAArB;AAEA,MAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAiB,WAAW,GAA1C,CAAc,CAAd;AACA,MAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAkB,QAAQ,GAAT,QAAC,IAAhC,CAAc,CAAd;AAEA,SAAO,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAiB;AACjC,WAAO;AACL,MAAA,CAAC,EAAE,IAAI,GAAG,KAAK,GADV,KAAA;AAEL,MAAA,CAAC,EACC,IAAI,GACJ,CAAC,KAAK,GAAN,QAAA,IADA,KAAA,GAEA,EAAE,KAAK,KAAK,WAAW,GAAvB,CAAA,IAFA,OAAA,GAGA,EAAE,KAAK,KAAP,CAAA,IANG,OAAA;AAOL,MAAA,KAAA,EAAA;AAPK,KAAP;AADF,GAAO,CAAP;AAWD;AAED,OAAM,SAAA,OAAA,CAAA,MAAA,EAAA,QAAA,EAEc;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEZ,IAFY,GAElB,QAFkB,CAEZ,IAFY;AAAA,MAEQ,IAFR,GAElB,QAFkB,CAEQ,IAFR;AAGlB,MAAM,WAAW,GAAG,MAAM,CAA1B,MAAA;AACA,MAAI,QAAQ,GAAG,IAAI,CAAJ,GAAA,OAAA,IAAI,qBAAnB,MAAmB,EAAnB;AACA,MAAI,QAAQ,GAAG,IAAI,CAAJ,GAAA,OAAA,IAAI,qBAAnB,MAAmB,EAAnB;AAEA,MAAI,QAAQ,GAAZ,CAAA,EAAkB,QAAQ,GAAR,CAAA;AAClB,MAAI,QAAQ,GAAZ,CAAA,EAAkB,QAAQ,GAAR,CAAA;AAElB,MAAM,KAAK,GAAG,IAAI,GAAlB,WAAA;AACA,MAAM,KAAK,GAAG,CAAC,IAAI,GAAL,IAAA,KAAiB,QAAQ,GAAvC,QAAc,CAAd;AACA,MAAM,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAJ,GAAA,CAAS,QAAQ,GAAzC,KAAwB,CAAxB;AAEA,SAAO,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAiB;AACjC,QAAM,MAAM,GAAG,IAAI,CAAJ,GAAA,CAAS,KAAK,GAA7B,KAAe,CAAf;AAEA,WAAO;AACL,MAAA,CAAC,EAAE,IAAI,GAAG,KAAK,GADV,KAAA;AAEL,MAAA,CAAC,EAAE,QAAQ,GAAR,MAAA,GACD,EAAE,KAAK,GAAP,CAAA,IAHG,MAAA;AAIL,MAAA,MAJK,EAIL,MAJK;AAKL,MAAA,KAAA,EAAA;AALK,KAAP;AAHF,GAAO,CAAP;AAWD","sourcesContent":["import { Point, Boundary, Bar } from '../VSparkline'\n\nexport function genPoints (\n  values: number[],\n  boundary: Boundary\n): Point[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  const maxValue = Math.max(...values)\n  const minValue = Math.min(...values)\n\n  const gridX = (maxX - minX) / (totalValues - 1)\n  const gridY = (maxY - minY) / ((maxValue - minValue) || 1)\n\n  return values.map((value, index) => {\n    return {\n      x: minX + index * gridX,\n      y:\n        maxY -\n        (value - minValue) * gridY +\n        +(index === totalValues - 1) * 0.00001 -\n        +(index === 0) * 0.00001,\n      value,\n    }\n  })\n}\n\nexport function genBars (\n  values: number[],\n  boundary: Boundary\n): Bar[] {\n  const { minX, maxX, minY, maxY } = boundary\n  const totalValues = values.length\n  let maxValue = Math.max(...values)\n  let minValue = Math.min(...values)\n\n  if (minValue > 0) minValue = 0\n  if (maxValue < 0) maxValue = 0\n\n  const gridX = maxX / totalValues\n  const gridY = (maxY - minY) / (maxValue - minValue)\n  const horizonY = maxY - Math.abs(minValue * gridY)\n\n  return values.map((value, index) => {\n    const height = Math.abs(gridY * value)\n\n    return {\n      x: minX + index * gridX,\n      y: horizonY - height +\n        +(value < 0) * height,\n      height,\n      value,\n    }\n  })\n}\n"],"sourceRoot":""}]}