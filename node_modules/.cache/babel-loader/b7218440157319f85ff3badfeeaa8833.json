{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VDatePicker/util/pad.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VDatePicker/util/pad.js","mtime":1592873617754},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.repeat\";\n\nvar padStart = function padStart(string, targetLength, padString) {\n  targetLength = targetLength >> 0;\n  string = String(string);\n  padString = String(padString);\n\n  if (string.length > targetLength) {\n    return String(string);\n  }\n\n  targetLength = targetLength - string.length;\n\n  if (targetLength > padString.length) {\n    padString += padString.repeat(targetLength / padString.length);\n  }\n\n  return padString.slice(0, targetLength) + String(string);\n};\n\nexport default (function (n) {\n  var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  return padStart(n, length, '0');\n});",{"version":3,"sources":["../../../../src/components/VDatePicker/util/pad.ts"],"names":[],"mappings":";;AAAA,IAAM,QAAQ,GAAG,SAAX,QAAW,CAAA,MAAA,EAAA,YAAA,EAAA,SAAA,EAAqE;AACpF,EAAA,YAAY,GAAG,YAAY,IAA3B,CAAA;AACA,EAAA,MAAM,GAAG,MAAM,CAAf,MAAe,CAAf;AACA,EAAA,SAAS,GAAG,MAAM,CAAlB,SAAkB,CAAlB;;AACA,MAAI,MAAM,CAAN,MAAA,GAAJ,YAAA,EAAkC;AAChC,WAAO,MAAM,CAAb,MAAa,CAAb;AACD;;AAED,EAAA,YAAY,GAAG,YAAY,GAAG,MAAM,CAApC,MAAA;;AACA,MAAI,YAAY,GAAG,SAAS,CAA5B,MAAA,EAAqC;AACnC,IAAA,SAAS,IAAI,SAAS,CAAT,MAAA,CAAiB,YAAY,GAAG,SAAS,CAAtD,MAAa,CAAb;AACD;;AACD,SAAO,SAAS,CAAT,KAAA,CAAA,CAAA,EAAA,YAAA,IAAmC,MAAM,CAAhD,MAAgD,CAAhD;AAZF,CAAA;;AAeA,gBAAe,UAAA,CAAA;AAAA,MAAqB,MAArB,uEAAA,CAAA;AAAA,SAAoC,QAAQ,CAAA,CAAA,EAAA,MAAA,EAA3D,GAA2D,CAA5C;AAAA,CAAf","sourcesContent":["const padStart = (string: number | string, targetLength: number, padString: string) => {\n  targetLength = targetLength >> 0\n  string = String(string)\n  padString = String(padString)\n  if (string.length > targetLength) {\n    return String(string)\n  }\n\n  targetLength = targetLength - string.length\n  if (targetLength > padString.length) {\n    padString += padString.repeat(targetLength / padString.length)\n  }\n  return padString.slice(0, targetLength) + String(string)\n}\n\nexport default (n: string | number, length = 2) => padStart(n, length, '0')\n"],"sourceRoot":""}]}