{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Styles\nimport \"../../../src/components/VAutocomplete/VAutocomplete.sass\"; // Extensions\n\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from \"../VSelect/VSelect\";\nimport VTextField from \"../VTextField/VTextField\"; // Utilities\n\nimport mergeData from \"../../util/mergeData\";\nimport { keyCodes, getObjectValueByPath } from \"../../util/helpers\";\n\nvar defaultMenuProps = _objectSpread({}, VSelectMenuProps, {\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false\n});\n/* @vue/component */\n\n\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false\n    },\n    filter: {\n      type: Function,\n      default: function _default(item, queryText, itemText) {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1;\n      }\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: function _default() {\n        return defaultMenuProps;\n      }\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String,\n      default: undefined\n    }\n  },\n  data: function data() {\n    return {\n      lazySearch: this.searchInput\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({}, VSelect.options.computed.classes.call(this), {\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1\n      });\n    },\n    computedItems: function computedItems() {\n      return this.filteredItems;\n    },\n    selectedValues: function selectedValues() {\n      var _this = this;\n\n      return this.selectedItems.map(function (item) {\n        return _this.getValue(item);\n      });\n    },\n    hasDisplayedItems: function hasDisplayedItems() {\n      var _this2 = this;\n\n      return this.hideSelected ? this.filteredItems.some(function (item) {\n        return !_this2.hasItem(item);\n      }) : this.filteredItems.length > 0;\n    },\n    currentRange: function currentRange() {\n      if (this.selectedItem == null) return 0;\n      return String(this.getText(this.selectedItem)).length;\n    },\n    filteredItems: function filteredItems() {\n      var _this3 = this;\n\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems;\n      return this.allItems.filter(function (item) {\n        return _this3.filter(item, String(_this3.internalSearch), String(_this3.getText(item)));\n      });\n    },\n    internalSearch: {\n      get: function get() {\n        return this.lazySearch;\n      },\n      set: function set(val) {\n        this.lazySearch = val;\n        this.$emit('update:search-input', val);\n      }\n    },\n    isAnyValueAllowed: function isAnyValueAllowed() {\n      return false;\n    },\n    isDirty: function isDirty() {\n      return this.searchIsDirty || this.selectedItems.length > 0;\n    },\n    isSearching: function isSearching() {\n      return this.multiple && this.searchIsDirty || this.searchIsDirty && this.internalSearch !== this.getText(this.selectedItem);\n    },\n    menuCanShow: function menuCanShow() {\n      if (!this.isFocused) return false;\n      return this.hasDisplayedItems || !this.hideNoData;\n    },\n    $_menuProps: function $_menuProps() {\n      var props = VSelect.options.computed.$_menuProps.call(this);\n      props.contentClass = \"v-autocomplete__content \".concat(props.contentClass || '').trim();\n      return _objectSpread({}, defaultMenuProps, {}, props);\n    },\n    searchIsDirty: function searchIsDirty() {\n      return this.internalSearch != null && this.internalSearch !== '';\n    },\n    selectedItem: function selectedItem() {\n      var _this4 = this;\n\n      if (this.multiple) return null;\n      return this.selectedItems.find(function (i) {\n        return _this4.valueComparator(_this4.getValue(i), _this4.getValue(_this4.internalValue));\n      });\n    },\n    listData: function listData() {\n      var data = VSelect.options.computed.listData.call(this);\n      data.props = _objectSpread({}, data.props, {\n        items: this.virtualizedItems,\n        noFilter: this.noFilter || !this.isSearching || !this.filteredItems.length,\n        searchInput: this.internalSearch\n      });\n      return data;\n    }\n  },\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused: function isFocused(val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy);\n        this.$refs.input && this.$refs.input.select();\n      } else {\n        document.removeEventListener('copy', this.onCopy);\n        this.updateSelf();\n      }\n    },\n    isMenuActive: function isMenuActive(val) {\n      if (val || !this.hasSlot) return;\n      this.lazySearch = undefined;\n    },\n    items: function items(val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (!(oldVal && oldVal.length) && this.hideNoData && this.isFocused && !this.isMenuActive && val.length) this.activateMenu();\n    },\n    searchInput: function searchInput(val) {\n      this.lazySearch = val;\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf'\n  },\n  created: function created() {\n    this.setSearch();\n  },\n  methods: {\n    onFilteredItemsChanged: function onFilteredItemsChanged(val, oldVal) {\n      var _this5 = this;\n\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return;\n      this.setMenuIndex(-1);\n      this.$nextTick(function () {\n        if (!_this5.internalSearch || val.length !== 1 && !_this5.autoSelectFirst) return;\n\n        _this5.$refs.menu.getTiles();\n\n        _this5.setMenuIndex(0);\n      });\n    },\n    onInternalSearchChanged: function onInternalSearchChanged() {\n      this.updateMenuDimensions();\n    },\n    updateMenuDimensions: function updateMenuDimensions() {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions();\n    },\n    changeSelectedIndex: function changeSelectedIndex(keyCode) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return;\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1;\n        } else {\n          this.selectedIndex--;\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1;\n        } else {\n          this.selectedIndex++;\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem();\n      }\n    },\n    deleteCurrentItem: function deleteCurrentItem() {\n      if (this.readonly) return;\n      var index = this.selectedItems.length - 1;\n\n      if (this.selectedIndex === -1 && index !== 0) {\n        this.selectedIndex = index;\n        return;\n      }\n\n      var currentItem = this.selectedItems[this.selectedIndex];\n      if (this.getDisabled(currentItem)) return;\n      var newIndex = this.selectedIndex === index ? this.selectedIndex - 1 : this.selectedItems[this.selectedIndex + 1] ? this.selectedIndex : -1;\n\n      if (newIndex === -1) {\n        this.setValue(this.multiple ? [] : undefined);\n      } else {\n        this.selectItem(currentItem);\n      }\n\n      this.selectedIndex = newIndex;\n    },\n    clearableCallback: function clearableCallback() {\n      this.internalSearch = undefined;\n      VSelect.options.methods.clearableCallback.call(this);\n    },\n    genInput: function genInput() {\n      var input = VTextField.options.methods.genInput.call(this);\n      input.data = mergeData(input.data, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data, 'attrs.autocomplete', 'off')\n        },\n        domProps: {\n          value: this.internalSearch\n        }\n      });\n      return input;\n    },\n    genInputSlot: function genInputSlot() {\n      var slot = VSelect.options.methods.genInputSlot.call(this);\n      slot.data.attrs.role = 'combobox';\n      return slot;\n    },\n    genSelections: function genSelections() {\n      return this.hasSlot || this.multiple ? VSelect.options.methods.genSelections.call(this) : [];\n    },\n    onClick: function onClick(e) {\n      if (this.isDisabled) return;\n      this.selectedIndex > -1 ? this.selectedIndex = -1 : this.onFocus();\n      if (!this.isAppendInner(e.target)) this.activateMenu();\n    },\n    onInput: function onInput(e) {\n      if (this.selectedIndex > -1 || !e.target) return;\n      var target = e.target;\n      var value = target.value; // If typing and menu is not currently active\n\n      if (target.value) this.activateMenu();\n      this.internalSearch = value;\n      this.badInput = target.validity && target.validity.badInput;\n    },\n    onKeyDown: function onKeyDown(e) {\n      var keyCode = e.keyCode;\n      VSelect.options.methods.onKeyDown.call(this, e); // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n\n      this.changeSelectedIndex(keyCode);\n    },\n    onSpaceDown: function onSpaceDown(e) {},\n    onTabDown: function onTabDown(e) {\n      VSelect.options.methods.onTabDown.call(this, e);\n      this.updateSelf();\n    },\n    onUpDown: function onUpDown(e) {\n      // Prevent screen from scrolling\n      e.preventDefault(); // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n\n      this.activateMenu();\n    },\n    selectItem: function selectItem(item) {\n      VSelect.options.methods.selectItem.call(this, item);\n      this.setSearch();\n    },\n    setSelectedItems: function setSelectedItems() {\n      VSelect.options.methods.setSelectedItems.call(this); // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n\n      if (!this.isFocused) this.setSearch();\n    },\n    setSearch: function setSearch() {\n      var _this6 = this;\n\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(function () {\n        if (!_this6.multiple || !_this6.internalSearch || !_this6.isMenuActive) {\n          _this6.internalSearch = !_this6.selectedItems.length || _this6.multiple || _this6.hasSlot ? null : _this6.getText(_this6.selectedItem);\n        }\n      });\n    },\n    updateSelf: function updateSelf() {\n      if (!this.searchIsDirty && !this.internalValue) return;\n\n      if (!this.valueComparator(this.internalSearch, this.getValue(this.internalValue))) {\n        this.setSearch();\n      }\n    },\n    hasItem: function hasItem(item) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1;\n    },\n    onCopy: function onCopy(event) {\n      if (this.selectedIndex === -1) return;\n      var currentItem = this.selectedItems[this.selectedIndex];\n      var currentItemText = this.getText(currentItem);\n      event.clipboardData.setData('text/plain', currentItemText);\n      event.clipboardData.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText);\n      event.preventDefault();\n    }\n  }\n});",{"version":3,"sources":["../../../src/components/VAutocomplete/VAutocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VAutocomplete.sass'\n\n// Extensions\nimport VSelect, { defaultMenuProps as VSelectMenuProps } from '../VSelect/VSelect'\nimport VTextField from '../VTextField/VTextField'\n\n// Utilities\nimport mergeData from '../../util/mergeData'\nimport { keyCodes, getObjectValueByPath } from '../../util/helpers'\n\n// Types\nimport { PropType } from 'vue'\n\nconst defaultMenuProps = {\n  ...VSelectMenuProps,\n  offsetY: true,\n  offsetOverflow: true,\n  transition: false,\n}\n\n/* @vue/component */\nexport default VSelect.extend({\n  name: 'v-autocomplete',\n\n  props: {\n    allowOverflow: {\n      type: Boolean,\n      default: true,\n    },\n    autoSelectFirst: {\n      type: Boolean,\n      default: false,\n    },\n    filter: {\n      type: Function,\n      default: (item: any, queryText: string, itemText: string) => {\n        return itemText.toLocaleLowerCase().indexOf(queryText.toLocaleLowerCase()) > -1\n      },\n    },\n    hideNoData: Boolean,\n    menuProps: {\n      type: VSelect.options.props.menuProps.type,\n      default: () => defaultMenuProps,\n    },\n    noFilter: Boolean,\n    searchInput: {\n      type: String as PropType<string | undefined>,\n      default: undefined,\n    },\n  },\n\n  data () {\n    return {\n      lazySearch: this.searchInput,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VSelect.options.computed.classes.call(this),\n        'v-autocomplete': true,\n        'v-autocomplete--is-selecting-index': this.selectedIndex > -1,\n      }\n    },\n    computedItems (): object[] {\n      return this.filteredItems\n    },\n    selectedValues (): object[] {\n      return this.selectedItems.map(item => this.getValue(item))\n    },\n    hasDisplayedItems (): boolean {\n      return this.hideSelected\n        ? this.filteredItems.some(item => !this.hasItem(item))\n        : this.filteredItems.length > 0\n    },\n    currentRange (): number {\n      if (this.selectedItem == null) return 0\n\n      return String(this.getText(this.selectedItem)).length\n    },\n    filteredItems (): object[] {\n      if (!this.isSearching || this.noFilter || this.internalSearch == null) return this.allItems\n\n      return this.allItems.filter(item => this.filter(item, String(this.internalSearch), String(this.getText(item))))\n    },\n    internalSearch: {\n      get (): string | undefined {\n        return this.lazySearch\n      },\n      set (val: any) {\n        this.lazySearch = val\n\n        this.$emit('update:search-input', val)\n      },\n    },\n    isAnyValueAllowed (): boolean {\n      return false\n    },\n    isDirty (): boolean {\n      return this.searchIsDirty || this.selectedItems.length > 0\n    },\n    isSearching (): boolean {\n      return (\n        this.multiple &&\n        this.searchIsDirty\n      ) || (\n        this.searchIsDirty &&\n        this.internalSearch !== this.getText(this.selectedItem)\n      )\n    },\n    menuCanShow (): boolean {\n      if (!this.isFocused) return false\n\n      return this.hasDisplayedItems || !this.hideNoData\n    },\n    $_menuProps (): object {\n      const props = VSelect.options.computed.$_menuProps.call(this);\n      (props as any).contentClass = `v-autocomplete__content ${(props as any).contentClass || ''}`.trim()\n      return {\n        ...defaultMenuProps,\n        ...props,\n      }\n    },\n    searchIsDirty (): boolean {\n      return this.internalSearch != null &&\n        this.internalSearch !== ''\n    },\n    selectedItem (): any {\n      if (this.multiple) return null\n\n      return this.selectedItems.find(i => {\n        return this.valueComparator(this.getValue(i), this.getValue(this.internalValue))\n      })\n    },\n    listData () {\n      const data = VSelect.options.computed.listData.call(this) as any\n\n      data.props = {\n        ...data.props,\n        items: this.virtualizedItems,\n        noFilter: (\n          this.noFilter ||\n          !this.isSearching ||\n          !this.filteredItems.length\n        ),\n        searchInput: this.internalSearch,\n      }\n\n      return data\n    },\n  },\n\n  watch: {\n    filteredItems: 'onFilteredItemsChanged',\n    internalValue: 'setSearch',\n    isFocused (val) {\n      if (val) {\n        document.addEventListener('copy', this.onCopy)\n        this.$refs.input && this.$refs.input.select()\n      } else {\n        document.removeEventListener('copy', this.onCopy)\n        this.updateSelf()\n      }\n    },\n    isMenuActive (val) {\n      if (val || !this.hasSlot) return\n\n      this.lazySearch = undefined\n    },\n    items (val, oldVal) {\n      // If we are focused, the menu\n      // is not active, hide no data is enabled,\n      // and items change\n      // User is probably async loading\n      // items, try to activate the menu\n      if (\n        !(oldVal && oldVal.length) &&\n        this.hideNoData &&\n        this.isFocused &&\n        !this.isMenuActive &&\n        val.length\n      ) this.activateMenu()\n    },\n    searchInput (val: string) {\n      this.lazySearch = val\n    },\n    internalSearch: 'onInternalSearchChanged',\n    itemText: 'updateSelf',\n  },\n\n  created () {\n    this.setSearch()\n  },\n\n  methods: {\n    onFilteredItemsChanged (val: never[], oldVal: never[]) {\n      // TODO: How is the watcher triggered\n      // for duplicate items? no idea\n      if (val === oldVal) return\n\n      this.setMenuIndex(-1)\n\n      this.$nextTick(() => {\n        if (\n          !this.internalSearch ||\n          (val.length !== 1 &&\n            !this.autoSelectFirst)\n        ) return\n\n        this.$refs.menu.getTiles()\n        this.setMenuIndex(0)\n      })\n    },\n    onInternalSearchChanged () {\n      this.updateMenuDimensions()\n    },\n    updateMenuDimensions () {\n      // Type from menuable is not making it through\n      this.isMenuActive && this.$refs.menu && this.$refs.menu.updateDimensions()\n    },\n    changeSelectedIndex (keyCode: number) {\n      // Do not allow changing of selectedIndex\n      // when search is dirty\n      if (this.searchIsDirty) return\n\n      if (this.multiple && keyCode === keyCodes.left) {\n        if (this.selectedIndex === -1) {\n          this.selectedIndex = this.selectedItems.length - 1\n        } else {\n          this.selectedIndex--\n        }\n      } else if (this.multiple && keyCode === keyCodes.right) {\n        if (this.selectedIndex >= this.selectedItems.length - 1) {\n          this.selectedIndex = -1\n        } else {\n          this.selectedIndex++\n        }\n      } else if (keyCode === keyCodes.backspace || keyCode === keyCodes.delete) {\n        this.deleteCurrentItem()\n      }\n    },\n    deleteCurrentItem () {\n      if (this.readonly) return\n\n      const index = this.selectedItems.length - 1\n\n      if (this.selectedIndex === -1 && index !== 0) {\n        this.selectedIndex = index\n        return\n      }\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n\n      if (this.getDisabled(currentItem)) return\n\n      const newIndex = this.selectedIndex === index\n        ? this.selectedIndex - 1\n        : this.selectedItems[this.selectedIndex + 1]\n          ? this.selectedIndex\n          : -1\n\n      if (newIndex === -1) {\n        this.setValue(this.multiple ? [] : undefined)\n      } else {\n        this.selectItem(currentItem)\n      }\n\n      this.selectedIndex = newIndex\n    },\n    clearableCallback () {\n      this.internalSearch = undefined\n\n      VSelect.options.methods.clearableCallback.call(this)\n    },\n    genInput () {\n      const input = VTextField.options.methods.genInput.call(this)\n\n      input.data = mergeData(input.data!, {\n        attrs: {\n          'aria-activedescendant': getObjectValueByPath(this.$refs.menu, 'activeTile.id'),\n          autocomplete: getObjectValueByPath(input.data!, 'attrs.autocomplete', 'off'),\n        },\n        domProps: { value: this.internalSearch },\n      })\n\n      return input\n    },\n    genInputSlot () {\n      const slot = VSelect.options.methods.genInputSlot.call(this)\n\n      slot.data!.attrs!.role = 'combobox'\n\n      return slot\n    },\n    genSelections () {\n      return this.hasSlot || this.multiple\n        ? VSelect.options.methods.genSelections.call(this)\n        : []\n    },\n    onClick (e: MouseEvent) {\n      if (this.isDisabled) return\n\n      this.selectedIndex > -1\n        ? (this.selectedIndex = -1)\n        : this.onFocus()\n\n      if (!this.isAppendInner(e.target)) this.activateMenu()\n    },\n    onInput (e: Event) {\n      if (\n        this.selectedIndex > -1 ||\n        !e.target\n      ) return\n\n      const target = e.target as HTMLInputElement\n      const value = target.value\n\n      // If typing and menu is not currently active\n      if (target.value) this.activateMenu()\n\n      this.internalSearch = value\n      this.badInput = target.validity && target.validity.badInput\n    },\n    onKeyDown (e: KeyboardEvent) {\n      const keyCode = e.keyCode\n\n      VSelect.options.methods.onKeyDown.call(this, e)\n\n      // The ordering is important here\n      // allows new value to be updated\n      // and then moves the index to the\n      // proper location\n      this.changeSelectedIndex(keyCode)\n    },\n    onSpaceDown (e: KeyboardEvent) { /* noop */ },\n    onTabDown (e: KeyboardEvent) {\n      VSelect.options.methods.onTabDown.call(this, e)\n      this.updateSelf()\n    },\n    onUpDown (e: Event) {\n      // Prevent screen from scrolling\n      e.preventDefault()\n\n      // For autocomplete / combobox, cycling\n      // interfers with native up/down behavior\n      // instead activate the menu\n      this.activateMenu()\n    },\n    selectItem (item: object) {\n      VSelect.options.methods.selectItem.call(this, item)\n      this.setSearch()\n    },\n    setSelectedItems () {\n      VSelect.options.methods.setSelectedItems.call(this)\n\n      // #4273 Don't replace if searching\n      // #4403 Don't replace if focused\n      if (!this.isFocused) this.setSearch()\n    },\n    setSearch () {\n      // Wait for nextTick so selectedItem\n      // has had time to update\n      this.$nextTick(() => {\n        if (\n          !this.multiple ||\n          !this.internalSearch ||\n          !this.isMenuActive\n        ) {\n          this.internalSearch = (\n            !this.selectedItems.length ||\n            this.multiple ||\n            this.hasSlot\n          )\n            ? null\n            : this.getText(this.selectedItem)\n        }\n      })\n    },\n    updateSelf () {\n      if (!this.searchIsDirty &&\n        !this.internalValue\n      ) return\n\n      if (!this.valueComparator(\n        this.internalSearch,\n        this.getValue(this.internalValue)\n      )) {\n        this.setSearch()\n      }\n    },\n    hasItem (item: any) {\n      return this.selectedValues.indexOf(this.getValue(item)) > -1\n    },\n    onCopy (event: ClipboardEvent) {\n      if (this.selectedIndex === -1) return\n\n      const currentItem = this.selectedItems[this.selectedIndex]\n      const currentItemText = this.getText(currentItem)\n      event.clipboardData!.setData('text/plain', currentItemText)\n      event.clipboardData!.setData('text/vnd.vuetify.autocomplete.item+plain', currentItemText)\n      event.preventDefault()\n    },\n  },\n})\n"],"sourceRoot":""}]}