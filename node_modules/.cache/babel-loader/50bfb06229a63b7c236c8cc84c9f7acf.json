{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/colorable/index.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/colorable/index.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.regexp.split\";\nimport _slicedToArray from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.regexp.match\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Vue from 'vue';\nimport { consoleError } from \"../../util/console\";\n\nfunction isCssColor(color) {\n  return !!color && !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/);\n}\n\nexport default Vue.extend({\n  name: 'colorable',\n  props: {\n    color: String\n  },\n  methods: {\n    setBackgroundColor: function setBackgroundColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread({}, data.style, {\n          'background-color': \"\".concat(color),\n          'border-color': \"\".concat(color)\n        });\n      } else if (color) {\n        data.class = _objectSpread({}, data.class, _defineProperty({}, color, true));\n      }\n\n      return data;\n    },\n    setTextColor: function setTextColor(color) {\n      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this); // istanbul ignore next\n\n        return data;\n      }\n\n      if (isCssColor(color)) {\n        data.style = _objectSpread({}, data.style, {\n          color: \"\".concat(color),\n          'caret-color': \"\".concat(color)\n        });\n      } else if (color) {\n        var _color$toString$trim$ = color.toString().trim().split(' ', 2),\n            _color$toString$trim$2 = _slicedToArray(_color$toString$trim$, 2),\n            colorName = _color$toString$trim$2[0],\n            colorModifier = _color$toString$trim$2[1];\n\n        data.class = _objectSpread({}, data.class, _defineProperty({}, colorName + '--text', true));\n\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true;\n        }\n      }\n\n      return data;\n    }\n  }\n});",{"version":3,"sources":["../../../src/mixins/colorable/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,OAAA,GAAA,MAAA,KAAA;AAEA,SAAA,YAAA;;AAEA,SAAA,UAAA,CAAA,KAAA,EAA2C;AACzC,SAAO,CAAC,CAAD,KAAA,IAAW,CAAC,CAAC,KAAK,CAAL,KAAA,CAApB,4BAAoB,CAApB;AACD;;AAED,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,WAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,KAAK,EAAE;AADF,GAHiB;AAOxB,EAAA,OAAO,EAAE;AACP,IAAA,kBADO,8BACW,KADX,EACyD;AAAA,UAApB,IAAoB,uEAA9C,EAA8C;;AAC9D,UAAI,OAAO,IAAI,CAAX,KAAA,KAAJ,QAAA,EAAoC;AAClC;AACA,QAAA,YAAY,CAAA,yBAAA,EAFsB,IAEtB,CAAZ,CAFkC,CAGlC;;AACA,eAAA,IAAA;AACD;;AACD,UAAI,OAAO,IAAI,CAAX,KAAA,KAAJ,QAAA,EAAoC;AAClC;AACA,QAAA,YAAY,CAAA,yBAAA,EAFsB,IAEtB,CAAZ,CAFkC,CAGlC;;AACA,eAAA,IAAA;AACD;;AACD,UAAI,UAAU,CAAd,KAAc,CAAd,EAAuB;AACrB,QAAA,IAAI,CAAJ,KAAA,qBACK,IAAI,CADI,KAAb;AAEE,wCAFW,KAEX,CAFF;AAGE,oCAAmB,KAAnB;AAHF;AADF,OAAA,MAMO,IAAA,KAAA,EAAW;AAChB,QAAA,IAAI,CAAJ,KAAA,qBACK,IAAI,CADI,KAAb,sBAEE,KAFF,EAEW,IAFX;AAID;;AAED,aAAA,IAAA;AA3BK,KAAA;AA8BP,IAAA,YA9BO,wBA8BK,KA9BL,EA8BmD;AAAA,UAApB,IAAoB,uEAA9C,EAA8C;;AACxD,UAAI,OAAO,IAAI,CAAX,KAAA,KAAJ,QAAA,EAAoC;AAClC;AACA,QAAA,YAAY,CAAA,yBAAA,EAFsB,IAEtB,CAAZ,CAFkC,CAGlC;;AACA,eAAA,IAAA;AACD;;AACD,UAAI,OAAO,IAAI,CAAX,KAAA,KAAJ,QAAA,EAAoC;AAClC;AACA,QAAA,YAAY,CAAA,yBAAA,EAFsB,IAEtB,CAAZ,CAFkC,CAGlC;;AACA,eAAA,IAAA;AACD;;AACD,UAAI,UAAU,CAAd,KAAc,CAAd,EAAuB;AACrB,QAAA,IAAI,CAAJ,KAAA,qBACK,IAAI,CADI,KAAb;AAEE,UAAA,KAAK,YAFM,KAEN,CAFP;AAGE,mCAAkB,KAAlB;AAHF;AADF,OAAA,MAMO,IAAA,KAAA,EAAW;AAAA,oCACmB,KAAK,CAAL,QAAA,GAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAnC,CAAmC,CADnB;AAAA;AAAA,YACV,SADU;AAAA,YACV,aADU;;AAEhB,QAAA,IAAI,CAAJ,KAAA,qBACK,IAAI,CADI,KAAb,sBAEG,SAAS,GAAV,QAFF,EAE0B,IAF1B;;AAIA,YAAA,aAAA,EAAmB;AACjB,UAAA,IAAI,CAAJ,KAAA,CAAW,WAAX,aAAA,IAAA,IAAA;AACD;AACF;;AACD,aAAA,IAAA;AACD;AA5DM;AAPe,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\nimport { consoleError } from '../../util/console'\n\nfunction isCssColor (color?: string | false): boolean {\n  return !!color && !!color.match(/^(#|var\\(--|(rgb|hsl)a?\\()/)\n}\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String,\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`,\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true,\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (typeof data.style === 'string') {\n        // istanbul ignore next\n        consoleError('style must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (typeof data.class === 'string') {\n        // istanbul ignore next\n        consoleError('class must be an object', this)\n        // istanbul ignore next\n        return data\n      }\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          color: `${color}`,\n          'caret-color': `${color}`,\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true,\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    },\n  },\n})\n"],"sourceRoot":""}]}