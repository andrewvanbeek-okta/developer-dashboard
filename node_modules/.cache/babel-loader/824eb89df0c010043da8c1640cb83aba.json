{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VProgressCircular/VProgressCircular.js","mtime":1592873617788},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n// Styles\nimport \"../../../src/components/VProgressCircular/VProgressCircular.sass\"; // Mixins\n\nimport Colorable from \"../../mixins/colorable\"; // Utils\n\nimport { convertToUnit } from \"../../util/helpers\";\n/* @vue/component */\n\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0\n    },\n    size: {\n      type: [Number, String],\n      default: 32\n    },\n    width: {\n      type: [Number, String],\n      default: 4\n    },\n    value: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      radius: 20\n    };\n  },\n  computed: {\n    calculatedSize: function calculatedSize() {\n      return Number(this.size) + (this.button ? 8 : 0);\n    },\n    circumference: function circumference() {\n      return 2 * Math.PI * this.radius;\n    },\n    classes: function classes() {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button\n      };\n    },\n    normalizedValue: function normalizedValue() {\n      if (this.value < 0) {\n        return 0;\n      }\n\n      if (this.value > 100) {\n        return 100;\n      }\n\n      return parseFloat(this.value);\n    },\n    strokeDashArray: function strokeDashArray() {\n      return Math.round(this.circumference * 1000) / 1000;\n    },\n    strokeDashOffset: function strokeDashOffset() {\n      return (100 - this.normalizedValue) / 100 * this.circumference + 'px';\n    },\n    strokeWidth: function strokeWidth() {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2;\n    },\n    styles: function styles() {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize)\n      };\n    },\n    svgStyles: function svgStyles() {\n      return {\n        transform: \"rotate(\".concat(Number(this.rotate), \"deg)\")\n      };\n    },\n    viewBoxSize: function viewBoxSize() {\n      return this.radius / (1 - Number(this.width) / +this.size);\n    }\n  },\n  methods: {\n    genCircle: function genCircle(name, offset) {\n      return this.$createElement('circle', {\n        class: \"v-progress-circular__\".concat(name),\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset\n        }\n      });\n    },\n    genSvg: function genSvg() {\n      var children = [this.indeterminate || this.genCircle('underlay', 0), this.genCircle('overlay', this.strokeDashOffset)];\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: \"\".concat(this.viewBoxSize, \" \").concat(this.viewBoxSize, \" \").concat(2 * this.viewBoxSize, \" \").concat(2 * this.viewBoxSize)\n        }\n      }, children);\n    },\n    genInfo: function genInfo() {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info'\n      }, this.$slots.default);\n    }\n  },\n  render: function render(h) {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners\n    }), [this.genSvg(), this.genInfo()]);\n  }\n});",{"version":3,"sources":["../../../src/components/VProgressCircular/VProgressCircular.ts"],"names":[],"mappings":"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","sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport { convertToUnit } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren } from 'vue'\n\n/* @vue/component */\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    size: {\n      type: [Number, String],\n      default: 32,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  data: () => ({\n    radius: 20,\n  }),\n\n  computed: {\n    calculatedSize (): number {\n      return Number(this.size) + (this.button ? 8 : 0)\n    },\n\n    circumference (): number {\n      return 2 * Math.PI * this.radius\n    },\n\n    classes (): object {\n      return {\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button,\n      }\n    },\n\n    normalizedValue (): number {\n      if (this.value < 0) {\n        return 0\n      }\n\n      if (this.value > 100) {\n        return 100\n      }\n\n      return parseFloat(this.value)\n    },\n\n    strokeDashArray (): number {\n      return Math.round(this.circumference * 1000) / 1000\n    },\n\n    strokeDashOffset (): string {\n      return ((100 - this.normalizedValue) / 100) * this.circumference + 'px'\n    },\n\n    strokeWidth (): number {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2\n    },\n\n    styles (): object {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize),\n      }\n    },\n\n    svgStyles (): object {\n      return {\n        transform: `rotate(${Number(this.rotate)}deg)`,\n      }\n    },\n\n    viewBoxSize (): number {\n      return this.radius / (1 - Number(this.width) / +this.size)\n    },\n  },\n\n  methods: {\n    genCircle (name: string, offset: string | number): VNode {\n      return this.$createElement('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset,\n        },\n      })\n    },\n    genSvg (): VNode {\n      const children = [\n        this.indeterminate || this.genCircle('underlay', 0),\n        this.genCircle('overlay', this.strokeDashOffset),\n      ] as VNodeChildren\n\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`,\n        },\n      }, children)\n    },\n    genInfo (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info',\n      }, this.$slots.default)\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue,\n      },\n      class: this.classes,\n      style: this.styles,\n      on: this.$listeners,\n    }), [\n      this.genSvg(),\n      this.genInfo(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}