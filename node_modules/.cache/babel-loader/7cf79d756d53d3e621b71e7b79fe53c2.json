{"remainingRequest":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VCalendar/mixins/times.js","dependencies":[{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/vuetify/lib/components/VCalendar/mixins/times.js","mtime":1592873617730},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":1592873611678},{"path":"/Users/andrewvanbeek/opa-dev-dash/node_modules/babel-loader/lib/index.js","mtime":1592873611535}],"contextDependencies":[],"result":["import Vue from 'vue';\nimport { validateTimestamp, parseTimestamp, parseDate } from \"../util/timestamp\";\nexport default Vue.extend({\n  name: 'times',\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp\n    }\n  },\n  data: function data() {\n    return {\n      times: {\n        now: parseTimestamp('0000-00-00 00:00', true),\n        today: parseTimestamp('0000-00-00', true)\n      }\n    };\n  },\n  computed: {\n    parsedNow: function parsedNow() {\n      return this.now ? parseTimestamp(this.now, true) : null;\n    }\n  },\n  watch: {\n    parsedNow: 'updateTimes'\n  },\n  created: function created() {\n    this.updateTimes();\n    this.setPresent();\n  },\n  methods: {\n    setPresent: function setPresent() {\n      this.times.now.present = this.times.today.present = true;\n      this.times.now.past = this.times.today.past = false;\n      this.times.now.future = this.times.today.future = false;\n    },\n    updateTimes: function updateTimes() {\n      var now = this.parsedNow || this.getNow();\n      this.updateDay(now, this.times.now);\n      this.updateTime(now, this.times.now);\n      this.updateDay(now, this.times.today);\n    },\n    getNow: function getNow() {\n      return parseDate(new Date());\n    },\n    updateDay: function updateDay(now, target) {\n      if (now.date !== target.date) {\n        target.year = now.year;\n        target.month = now.month;\n        target.day = now.day;\n        target.weekday = now.weekday;\n        target.date = now.date;\n      }\n    },\n    updateTime: function updateTime(now, target) {\n      if (now.time !== target.time) {\n        target.hour = now.hour;\n        target.minute = now.minute;\n        target.time = now.time;\n      }\n    }\n  }\n});",{"version":3,"sources":["../../../../src/components/VCalendar/mixins/times.ts"],"names":[],"mappings":"AAAA,OAAA,GAAA,MAAA,KAAA;AAEA,SAAA,iBAAA,EAAA,cAAA,EAAA,SAAA;AAOA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,OAAA;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,GAAG,EAAE;AACH,MAAA,IAAI,EADD,MAAA;AAEH,MAAA,SAAS,EAAE;AAFR;AADA,GAHiB;AAUxB,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,KAAK,EAAE;AACL,QAAA,GAAG,EAAE,cAAc,CAAA,kBAAA,EADd,IACc,CADd;AAEL,QAAA,KAAK,EAAE,cAAc,CAAA,YAAA,EAAA,IAAA;AAFhB;AADI,KAAP;AAAA,GAVkB;AAiBxB,EAAA,QAAQ,EAAE;AACR,IAAA,SADQ,uBACC;AACP,aAAO,KAAA,GAAA,GAAW,cAAc,CAAC,KAAD,GAAA,EAAzB,IAAyB,CAAzB,GAAP,IAAA;AACD;AAHO,GAjBc;AAuBxB,EAAA,KAAK,EAAE;AACL,IAAA,SAAS,EAAE;AADN,GAvBiB;AA2BxB,EAAA,OA3BwB,qBA2BjB;AACL,SAAA,WAAA;AACA,SAAA,UAAA;AA7BsB,GAAA;AAgCxB,EAAA,OAAO,EAAE;AACP,IAAA,UADO,wBACG;AACR,WAAA,KAAA,CAAA,GAAA,CAAA,OAAA,GAAyB,KAAA,KAAA,CAAA,KAAA,CAAA,OAAA,GAAzB,IAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,IAAA,GAAsB,KAAA,KAAA,CAAA,KAAA,CAAA,IAAA,GAAtB,KAAA;AACA,WAAA,KAAA,CAAA,GAAA,CAAA,MAAA,GAAwB,KAAA,KAAA,CAAA,KAAA,CAAA,MAAA,GAAxB,KAAA;AAJK,KAAA;AAMP,IAAA,WANO,yBAMI;AACT,UAAM,GAAG,GAAsB,KAAA,SAAA,IAAkB,KAAjD,MAAiD,EAAjD;AACA,WAAA,SAAA,CAAA,GAAA,EAAoB,KAAA,KAAA,CAApB,GAAA;AACA,WAAA,UAAA,CAAA,GAAA,EAAqB,KAAA,KAAA,CAArB,GAAA;AACA,WAAA,SAAA,CAAA,GAAA,EAAoB,KAAA,KAAA,CAApB,KAAA;AAVK,KAAA;AAYP,IAAA,MAZO,oBAYD;AACJ,aAAO,SAAS,CAAC,IAAjB,IAAiB,EAAD,CAAhB;AAbK,KAAA;AAeP,IAAA,SAfO,qBAeE,GAfF,EAeE,MAfF,EAeqD;AAC1D,UAAI,GAAG,CAAH,IAAA,KAAa,MAAM,CAAvB,IAAA,EAA8B;AAC5B,QAAA,MAAM,CAAN,IAAA,GAAc,GAAG,CAAjB,IAAA;AACA,QAAA,MAAM,CAAN,KAAA,GAAe,GAAG,CAAlB,KAAA;AACA,QAAA,MAAM,CAAN,GAAA,GAAa,GAAG,CAAhB,GAAA;AACA,QAAA,MAAM,CAAN,OAAA,GAAiB,GAAG,CAApB,OAAA;AACA,QAAA,MAAM,CAAN,IAAA,GAAc,GAAG,CAAjB,IAAA;AACD;AAtBI,KAAA;AAwBP,IAAA,UAxBO,sBAwBG,GAxBH,EAwBG,MAxBH,EAwBsD;AAC3D,UAAI,GAAG,CAAH,IAAA,KAAa,MAAM,CAAvB,IAAA,EAA8B;AAC5B,QAAA,MAAM,CAAN,IAAA,GAAc,GAAG,CAAjB,IAAA;AACA,QAAA,MAAM,CAAN,MAAA,GAAgB,GAAG,CAAnB,MAAA;AACA,QAAA,MAAM,CAAN,IAAA,GAAc,GAAG,CAAjB,IAAA;AACD;AACF;AA9BM;AAhCe,CAAX,CAAf","sourcesContent":["import Vue from 'vue'\n\nimport {\n  validateTimestamp,\n  parseTimestamp,\n  parseDate,\n} from '../util/timestamp'\nimport { CalendarTimestamp } from 'types'\n\nexport default Vue.extend({\n  name: 'times',\n\n  props: {\n    now: {\n      type: String,\n      validator: validateTimestamp,\n    },\n  },\n\n  data: () => ({\n    times: {\n      now: parseTimestamp('0000-00-00 00:00', true),\n      today: parseTimestamp('0000-00-00', true),\n    },\n  }),\n\n  computed: {\n    parsedNow (): CalendarTimestamp | null {\n      return this.now ? parseTimestamp(this.now, true) : null\n    },\n  },\n\n  watch: {\n    parsedNow: 'updateTimes',\n  },\n\n  created () {\n    this.updateTimes()\n    this.setPresent()\n  },\n\n  methods: {\n    setPresent (): void {\n      this.times.now.present = this.times.today.present = true\n      this.times.now.past = this.times.today.past = false\n      this.times.now.future = this.times.today.future = false\n    },\n    updateTimes (): void {\n      const now: CalendarTimestamp = this.parsedNow || this.getNow()\n      this.updateDay(now, this.times.now)\n      this.updateTime(now, this.times.now)\n      this.updateDay(now, this.times.today)\n    },\n    getNow (): CalendarTimestamp {\n      return parseDate(new Date())\n    },\n    updateDay (now: CalendarTimestamp, target: CalendarTimestamp): void {\n      if (now.date !== target.date) {\n        target.year = now.year\n        target.month = now.month\n        target.day = now.day\n        target.weekday = now.weekday\n        target.date = now.date\n      }\n    },\n    updateTime (now: CalendarTimestamp, target: CalendarTimestamp): void {\n      if (now.time !== target.time) {\n        target.hour = now.hour\n        target.minute = now.minute\n        target.time = now.time\n      }\n    },\n  },\n})\n"],"sourceRoot":""}]}