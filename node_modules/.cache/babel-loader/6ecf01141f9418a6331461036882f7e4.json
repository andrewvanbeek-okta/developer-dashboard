{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanel.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/maxpollard/developer-dashboard/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Mixins\nimport { factory as GroupableFactory } from \"../../mixins/groupable\";\nimport { provide as RegistrableProvide } from \"../../mixins/registrable\"; // Utilities\n\nimport { getSlot } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nexport default mixins(GroupableFactory('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'), RegistrableProvide('expansionPanel', true)\n/* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n  props: {\n    disabled: Boolean,\n    readonly: Boolean\n  },\n  data: function data() {\n    return {\n      content: null,\n      header: null,\n      nextIsActive: false\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return _objectSpread({\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled\n      }, this.groupClasses);\n    },\n    isDisabled: function isDisabled() {\n      return this.expansionPanels.disabled || this.disabled;\n    },\n    isReadonly: function isReadonly() {\n      return this.expansionPanels.readonly || this.readonly;\n    }\n  },\n  methods: {\n    registerContent: function registerContent(vm) {\n      this.content = vm;\n    },\n    unregisterContent: function unregisterContent() {\n      this.content = null;\n    },\n    registerHeader: function registerHeader(vm) {\n      this.header = vm;\n      vm.$on('click', this.onClick);\n    },\n    unregisterHeader: function unregisterHeader() {\n      this.header = null;\n    },\n    onClick: function onClick(e) {\n      if (e.detail) this.header.$el.blur();\n      this.$emit('click', e);\n      this.isReadonly || this.isDisabled || this.toggle();\n    },\n    toggle: function toggle() {\n      var _this = this;\n\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true;\n      this.$nextTick(function () {\n        return _this.$emit('change');\n      });\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive)\n      }\n    }, getSlot(this));\n  }\n});",{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"names":[],"mappings":";;;;;;;;;AAKA;AACA,SAAS,OAAO,IAAhB,gBAAA;AACA,SAAS,OAAO,IAAhB,kBAAA,mC,CAEA;;AACA,SAAA,OAAA;AACA,OAAA,MAAA;AAQA,eAAe,MAAM,CACnB,gBAAgB,CAAA,iBAAA,EAAA,mBAAA,EADG,oBACH,CADG,EAEnB,kBAAkB,CAAA,gBAAA,EAAA,IAAA;AAClB;AAHmB,CAAN,CAAA,MAAA,CAIN;AACP,EAAA,IAAI,EADG,mBAAA;AAGP,EAAA,KAAK,EAAE;AACL,IAAA,QAAQ,EADH,OAAA;AAEL,IAAA,QAAQ,EAAE;AAFL,GAHA;AAQP,EAAA,IARO,kBAQH;AACF,WAAO;AACL,MAAA,OAAO,EADF,IAAA;AAEL,MAAA,MAAM,EAFD,IAAA;AAGL,MAAA,YAAY,EAAE;AAHT,KAAP;AATK,GAAA;AAgBP,EAAA,QAAQ,EAAE;AACR,IAAA,OADQ,qBACD;AACL;AACE,qCAA6B,KADxB,QAAP;AAEE,0CAAkC,KAF7B,YAAP;AAGE,uCAA+B,KAH1B;AAAP,SAIK,KAAK,YAJV;AAFM,KAAA;AASR,IAAA,UATQ,wBASE;AACR,aAAO,KAAA,eAAA,CAAA,QAAA,IAAiC,KAAxC,QAAA;AAVM,KAAA;AAYR,IAAA,UAZQ,wBAYE;AACR,aAAO,KAAA,eAAA,CAAA,QAAA,IAAiC,KAAxC,QAAA;AACD;AAdO,GAhBH;AAiCP,EAAA,OAAO,EAAE;AACP,IAAA,eADO,2BACQ,EADR,EAC4C;AACjD,WAAA,OAAA,GAAA,EAAA;AAFK,KAAA;AAIP,IAAA,iBAJO,+BAIU;AACf,WAAA,OAAA,GAAA,IAAA;AALK,KAAA;AAOP,IAAA,cAPO,0BAOO,EAPP,EAO0C;AAC/C,WAAA,MAAA,GAAA,EAAA;AACA,MAAA,EAAE,CAAF,GAAA,CAAA,OAAA,EAAgB,KAAhB,OAAA;AATK,KAAA;AAWP,IAAA,gBAXO,8BAWS;AACd,WAAA,MAAA,GAAA,IAAA;AAZK,KAAA;AAcP,IAAA,OAdO,mBAcA,CAdA,EAce;AACpB,UAAI,CAAC,CAAL,MAAA,EAAc,KAAA,MAAA,CAAA,GAAA,CAAA,IAAA;AAEd,WAAA,KAAA,CAAA,OAAA,EAAA,CAAA;AAEA,WAAA,UAAA,IAAmB,KAAnB,UAAA,IAAsC,KAAtC,MAAsC,EAAtC;AAnBK,KAAA;AAqBP,IAAA,MArBO,oBAqBD;AAAA;;AACJ;AACA,UAAI,KAAJ,OAAA,EAAkB,KAAA,OAAA,CAAA,QAAA,GAAA,IAAA;AAClB,WAAA,SAAA,CAAe;AAAA,eAAM,KAAA,CAAA,KAAA,CAArB,QAAqB,CAAN;AAAA,OAAf;AACD;AAzBM,GAjCF;AA6DP,EAAA,MA7DO,kBA6DD,CA7DC,EA6DE;AACP,WAAO,CAAC,CAAA,KAAA,EAAQ;AACd,MAAA,WAAW,EADG,mBAAA;AAEd,MAAA,KAAK,EAAE,KAFO,OAAA;AAGd,MAAA,KAAK,EAAE;AACL,yBAAiB,MAAM,CAAC,KAAD,QAAA;AADlB;AAHO,KAAR,EAML,OAAO,CANV,IAMU,CANF,CAAR;AAOD;AArEM,CAJM,CAAf","sourcesContent":["// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      /* istanbul ignore else */\n      if (this.content) this.content.isBooted = true\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n"],"sourceRoot":""}]}