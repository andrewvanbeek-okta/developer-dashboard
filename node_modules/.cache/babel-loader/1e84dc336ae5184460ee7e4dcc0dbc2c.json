{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VCalendar/util/events.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VCalendar/util/events.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { parseTimestamp, getDayIdentifier, getTimestampIdentifier, OFFSET_TIME } from \"./timestamp\";\nexport function parseEvent(input, index, startProperty, endProperty) {\n  var start = parseTimestamp(input[startProperty], true);\n  var end = input[endProperty] ? parseTimestamp(input[endProperty], true) : start;\n  var startIdentifier = getDayIdentifier(start);\n  var startTimestampIdentifier = getTimestampIdentifier(start);\n  var endIdentifier = getDayIdentifier(end);\n  var endOffset = start.hasTime ? 0 : 2359;\n  var endTimestampIdentifier = getTimestampIdentifier(end) + endOffset;\n  var allDay = !start.hasTime;\n  return {\n    input: input,\n    start: start,\n    startIdentifier: startIdentifier,\n    startTimestampIdentifier: startTimestampIdentifier,\n    end: end,\n    endIdentifier: endIdentifier,\n    endTimestampIdentifier: endTimestampIdentifier,\n    allDay: allDay,\n    index: index\n  };\n}\nexport function isEventOn(event, dayIdentifier) {\n  return dayIdentifier >= event.startIdentifier && dayIdentifier <= event.endIdentifier && dayIdentifier * OFFSET_TIME !== event.endTimestampIdentifier;\n}\nexport function isEventStart(event, day, dayIdentifier, firstWeekday) {\n  return dayIdentifier === event.startIdentifier || firstWeekday === day.weekday && isEventOn(event, dayIdentifier);\n}\nexport function isEventOverlapping(event, startIdentifier, endIdentifier) {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;\n}",{"version":3,"sources":["../../../../src/components/VCalendar/util/events.ts"],"names":[],"mappings":"AAAA,SAAA,cAAA,EAAA,gBAAA,EAAA,sBAAA,EAAA,WAAA;AAQA,OAAM,SAAA,UAAA,CAAA,KAAA,EAAA,KAAA,EAAA,aAAA,EAAA,WAAA,EAAqG;AACzG,MAAM,KAAK,GAAsB,cAAc,CAAC,KAAK,CAAN,aAAM,CAAN,EAA/C,IAA+C,CAA/C;AACA,MAAM,GAAG,GAAuB,KAAK,CAAL,WAAK,CAAL,GAAqB,cAAc,CAAC,KAAK,CAAN,WAAM,CAAN,EAAnC,IAAmC,CAAnC,GAAhC,KAAA;AACA,MAAM,eAAe,GAAW,gBAAgB,CAAhD,KAAgD,CAAhD;AACA,MAAM,wBAAwB,GAAW,sBAAsB,CAA/D,KAA+D,CAA/D;AACA,MAAM,aAAa,GAAW,gBAAgB,CAA9C,GAA8C,CAA9C;AACA,MAAM,SAAS,GAAW,KAAK,CAAL,OAAA,GAAA,CAAA,GAA1B,IAAA;AACA,MAAM,sBAAsB,GAAW,sBAAsB,CAAtB,GAAsB,CAAtB,GAAvC,SAAA;AACA,MAAM,MAAM,GAAY,CAAC,KAAK,CAA9B,OAAA;AAEA,SAAO;AAAE,IAAA,KAAF,EAAE,KAAF;AAAS,IAAA,KAAT,EAAS,KAAT;AAAgB,IAAA,eAAhB,EAAgB,eAAhB;AAAiC,IAAA,wBAAjC,EAAiC,wBAAjC;AAA2D,IAAA,GAA3D,EAA2D,GAA3D;AAAgE,IAAA,aAAhE,EAAgE,aAAhE;AAA+E,IAAA,sBAA/E,EAA+E,sBAA/E;AAAuG,IAAA,MAAvG,EAAuG,MAAvG;AAA+G,IAAA,KAAA,EAAA;AAA/G,GAAP;AACD;AAED,OAAM,SAAA,SAAA,CAAA,KAAA,EAAA,aAAA,EAAsE;AAC1E,SAAO,aAAa,IAAI,KAAK,CAAtB,eAAA,IACL,aAAa,IAAI,KAAK,CADjB,aAAA,IAEL,aAAa,GAAb,WAAA,KAAgC,KAAK,CAFvC,sBAAA;AAGD;AAED,OAAM,SAAA,YAAA,CAAA,KAAA,EAAA,GAAA,EAAA,aAAA,EAAA,YAAA,EAAuH;AAC3H,SAAO,aAAa,KAAK,KAAK,CAAvB,eAAA,IAA4C,YAAY,KAAK,GAAG,CAApB,OAAA,IAAgC,SAAS,CAAA,KAAA,EAA5F,aAA4F,CAA5F;AACD;AAED,OAAM,SAAA,kBAAA,CAAA,KAAA,EAAA,eAAA,EAAA,aAAA,EAAwG;AAC5G,SAAO,eAAe,IAAI,KAAK,CAAxB,aAAA,IAA0C,aAAa,IAAI,KAAK,CAAvE,eAAA;AACD","sourcesContent":["import {\n  parseTimestamp,\n  getDayIdentifier,\n  getTimestampIdentifier,\n  OFFSET_TIME,\n} from './timestamp'\nimport { CalendarTimestamp, CalendarEvent, CalendarEventParsed } from 'types'\n\nexport function parseEvent (input: CalendarEvent, index: number, startProperty: string, endProperty: string): CalendarEventParsed {\n  const start: CalendarTimestamp = parseTimestamp(input[startProperty], true)\n  const end: CalendarTimestamp = (input[endProperty] ? parseTimestamp(input[endProperty], true) : start)\n  const startIdentifier: number = getDayIdentifier(start)\n  const startTimestampIdentifier: number = getTimestampIdentifier(start)\n  const endIdentifier: number = getDayIdentifier(end)\n  const endOffset: number = start.hasTime ? 0 : 2359\n  const endTimestampIdentifier: number = getTimestampIdentifier(end) + endOffset\n  const allDay: boolean = !start.hasTime\n\n  return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index }\n}\n\nexport function isEventOn (event: CalendarEventParsed, dayIdentifier: number): boolean {\n  return dayIdentifier >= event.startIdentifier &&\n    dayIdentifier <= event.endIdentifier &&\n    dayIdentifier * OFFSET_TIME !== event.endTimestampIdentifier\n}\n\nexport function isEventStart (event: CalendarEventParsed, day: CalendarTimestamp, dayIdentifier: number, firstWeekday: number): boolean {\n  return dayIdentifier === event.startIdentifier || (firstWeekday === day.weekday && isEventOn(event, dayIdentifier))\n}\n\nexport function isEventOverlapping (event: CalendarEventParsed, startIdentifier: number, endIdentifier: number): boolean {\n  return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier\n}\n"],"sourceRoot":""}]}