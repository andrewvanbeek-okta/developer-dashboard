{"remainingRequest":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js!/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/themeable/index.js","dependencies":[{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/vuetify/lib/mixins/themeable/index.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/andrewvanbeek/okta/dev-dash/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/andrewvanbeek/okta/dev-dash/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Vue from 'vue';\nexport function functionalThemeClasses(context) {\n  var vm = _objectSpread({}, context.props, {}, context.injections);\n\n  var isDark = Themeable.options.computed.isDark.call(vm);\n  return Themeable.options.computed.themeClasses.call({\n    isDark: isDark\n  });\n}\n/* @vue/component */\n\nvar Themeable = Vue.extend().extend({\n  name: 'themeable',\n  provide: function provide() {\n    return {\n      theme: this.themeableProvide\n    };\n  },\n  inject: {\n    theme: {\n      default: {\n        isDark: false\n      }\n    }\n  },\n  props: {\n    dark: {\n      type: Boolean,\n      default: null\n    },\n    light: {\n      type: Boolean,\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      themeableProvide: {\n        isDark: false\n      }\n    };\n  },\n  computed: {\n    appIsDark: function appIsDark() {\n      return this.$vuetify.theme.dark || false;\n    },\n    isDark: function isDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark;\n      }\n    },\n    themeClasses: function themeClasses() {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark\n      };\n    },\n\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark: function rootIsDark() {\n      if (this.dark === true) {\n        // explicitly dark\n        return true;\n      } else if (this.light === true) {\n        // explicitly light\n        return false;\n      } else {\n        // inherit from v-app\n        return this.appIsDark;\n      }\n    },\n    rootThemeClasses: function rootThemeClasses() {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark\n      };\n    }\n  },\n  watch: {\n    isDark: {\n      handler: function handler(newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark;\n        }\n      },\n      immediate: true\n    }\n  }\n});\nexport default Themeable;",{"version":3,"sources":["../../../src/mixins/themeable/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAA,GAAA,MAAA,KAAA;AAUA,OAAM,SAAA,sBAAA,CAAA,OAAA,EAAwD;AAC5D,MAAM,EAAE,qBACH,OAAO,CADD,KAAH,MAEH,OAAO,CAAC,UAFL,CAAR;;AAIA,MAAM,MAAM,GAAG,SAAS,CAAT,OAAA,CAAA,QAAA,CAAA,MAAA,CAAA,IAAA,CAAf,EAAe,CAAf;AACA,SAAO,SAAS,CAAT,OAAA,CAAA,QAAA,CAAA,YAAA,CAAA,IAAA,CAA6C;AAAE,IAAA,MAAA,EAAA;AAAF,GAA7C,CAAP;AACD;AAED;;AACA,IAAM,SAAS,GAAG,GAAG,CAAH,MAAA,GAAA,MAAA,CAA+B;AAC/C,EAAA,IAAI,EAD2C,WAAA;AAG/C,EAAA,OAH+C,qBAGxC;AACL,WAAO;AACL,MAAA,KAAK,EAAE,KAAK;AADP,KAAP;AAJ6C,GAAA;AAS/C,EAAA,MAAM,EAAE;AACN,IAAA,KAAK,EAAE;AACL,MAAA,OAAO,EAAE;AACP,QAAA,MAAM,EAAE;AADD;AADJ;AADD,GATuC;AAiB/C,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EADA,OAAA;AAEJ,MAAA,OAAO,EAAE;AAFL,KADD;AAKL,IAAA,KAAK,EAAE;AACL,MAAA,IAAI,EADC,OAAA;AAEL,MAAA,OAAO,EAAE;AAFJ;AALF,GAjBwC;AA4B/C,EAAA,IA5B+C,kBA4B3C;AACF,WAAO;AACL,MAAA,gBAAgB,EAAE;AAChB,QAAA,MAAM,EAAE;AADQ;AADb,KAAP;AA7B6C,GAAA;AAoC/C,EAAA,QAAQ,EAAE;AACR,IAAA,SADQ,uBACC;AACP,aAAO,KAAA,QAAA,CAAA,KAAA,CAAA,IAAA,IAAP,KAAA;AAFM,KAAA;AAIR,IAAA,MAJQ,oBAIF;AACJ,UAAI,KAAA,IAAA,KAAJ,IAAA,EAAwB;AACtB;AACA,eAAA,IAAA;AAFF,OAAA,MAGO,IAAI,KAAA,KAAA,KAAJ,IAAA,EAAyB;AAC9B;AACA,eAAA,KAAA;AAFK,OAAA,MAGA;AACL;AACA,eAAO,KAAA,KAAA,CAAP,MAAA;AACD;AAdK,KAAA;AAgBR,IAAA,YAhBQ,0BAgBI;AACV,aAAO;AACL,uBAAe,KADV,MAAA;AAEL,wBAAgB,CAAC,KAAK;AAFjB,OAAP;AAjBM,KAAA;;AAsBR;AACA,IAAA,UAvBQ,wBAuBE;AACR,UAAI,KAAA,IAAA,KAAJ,IAAA,EAAwB;AACtB;AACA,eAAA,IAAA;AAFF,OAAA,MAGO,IAAI,KAAA,KAAA,KAAJ,IAAA,EAAyB;AAC9B;AACA,eAAA,KAAA;AAFK,OAAA,MAGA;AACL;AACA,eAAO,KAAP,SAAA;AACD;AAjCK,KAAA;AAmCR,IAAA,gBAnCQ,8BAmCQ;AACd,aAAO;AACL,uBAAe,KADV,UAAA;AAEL,wBAAgB,CAAC,KAAK;AAFjB,OAAP;AAID;AAxCO,GApCqC;AA+E/C,EAAA,KAAK,EAAE;AACL,IAAA,MAAM,EAAE;AACN,MAAA,OADM,mBACC,MADD,EACC,MADD,EACiB;AACrB,YAAI,MAAM,KAAV,MAAA,EAAuB;AACrB,eAAA,gBAAA,CAAA,MAAA,GAA+B,KAA/B,MAAA;AACD;AAJG,OAAA;AAMN,MAAA,SAAS,EAAE;AANL;AADH;AA/EwC,CAA/B,CAAlB;AA2FA,eAAA,SAAA","sourcesContent":["import Vue from 'vue'\nimport { PropType, RenderContext } from 'vue/types/options'\n\n/* eslint-disable-next-line no-use-before-define */\ninterface Themeable extends Vue {\n  theme: {\n    isDark: boolean\n  }\n}\n\nexport function functionalThemeClasses (context: RenderContext): object {\n  const vm = {\n    ...context.props,\n    ...context.injections,\n  }\n  const isDark = Themeable.options.computed.isDark.call(vm)\n  return Themeable.options.computed.themeClasses.call({ isDark })\n}\n\n/* @vue/component */\nconst Themeable = Vue.extend<Themeable>().extend({\n  name: 'themeable',\n\n  provide (): object {\n    return {\n      theme: this.themeableProvide,\n    }\n  },\n\n  inject: {\n    theme: {\n      default: {\n        isDark: false,\n      },\n    },\n  },\n\n  props: {\n    dark: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n    light: {\n      type: Boolean as PropType<boolean | null>,\n      default: null,\n    },\n  },\n\n  data () {\n    return {\n      themeableProvide: {\n        isDark: false,\n      },\n    }\n  },\n\n  computed: {\n    appIsDark (): boolean {\n      return this.$vuetify.theme.dark || false\n    },\n    isDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark\n      }\n    },\n    themeClasses (): object {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark,\n      }\n    },\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from v-app\n        return this.appIsDark\n      }\n    },\n    rootThemeClasses (): Dictionary<boolean> {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark,\n      }\n    },\n  },\n\n  watch: {\n    isDark: {\n      handler (newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark\n        }\n      },\n      immediate: true,\n    },\n  },\n})\n\nexport default Themeable\n"],"sourceRoot":""}]}