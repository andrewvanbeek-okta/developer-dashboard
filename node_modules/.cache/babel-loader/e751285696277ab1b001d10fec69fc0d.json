{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/mixins/scrollable/index.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/mixins/scrollable/index.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n// Directives\nimport { Scroll } from \"../../directives\"; // Utilities\n\nimport { consoleWarn } from \"../../util/console\"; // Types\n\nimport Vue from 'vue';\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n\n/* @vue/component */\n\nexport default Vue.extend({\n  name: 'scrollable',\n  directives: {\n    Scroll: Scroll\n  },\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number]\n  },\n  data: function data() {\n    return {\n      currentScroll: 0,\n      currentThreshold: 0,\n      isActive: false,\n      isScrollingUp: false,\n      previousScroll: 0,\n      savedScroll: 0,\n      target: null\n    };\n  },\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll: function canScroll() {\n      return typeof window !== 'undefined';\n    },\n\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold: function computedScrollThreshold() {\n      return this.scrollThreshold ? Number(this.scrollThreshold) : 300;\n    }\n  },\n  watch: {\n    isScrollingUp: function isScrollingUp() {\n      this.savedScroll = this.savedScroll || this.currentScroll;\n    },\n    isActive: function isActive() {\n      this.savedScroll = 0;\n    }\n  },\n  mounted: function mounted() {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget);\n\n      if (!this.target) {\n        consoleWarn(\"Unable to locate element with identifier \".concat(this.scrollTarget), this);\n      }\n    }\n  },\n  methods: {\n    onScroll: function onScroll() {\n      var _this = this;\n\n      if (!this.canScroll) return;\n      this.previousScroll = this.currentScroll;\n      this.currentScroll = this.target ? this.target.scrollTop : window.pageYOffset;\n      this.isScrollingUp = this.currentScroll < this.previousScroll;\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold);\n      this.$nextTick(function () {\n        if (Math.abs(_this.currentScroll - _this.savedScroll) > _this.computedScrollThreshold) _this.thresholdMet();\n      });\n    },\n\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet: function thresholdMet() {}\n  }\n});",{"version":3,"sources":["../../../src/mixins/scrollable/index.ts"],"names":[],"mappings":";AAAA;AACA,SAAA,MAAA,2B,CAEA;;AACA,SAAA,WAAA,6B,CAEA;;AACA,OAAA,GAAA,MAAA,KAAA;AAEA;;;;;;;;;AAQA;;AACA,eAAe,GAAG,CAAH,MAAA,CAAW;AACxB,EAAA,IAAI,EADoB,YAAA;AAGxB,EAAA,UAAU,EAAE;AAAE,IAAA,MAAA,EAAA;AAAF,GAHY;AAKxB,EAAA,KAAK,EAAE;AACL,IAAA,YAAY,EADP,MAAA;AAEL,IAAA,eAAe,EAAE,CAAA,MAAA,EAAA,MAAA;AAFZ,GALiB;AAUxB,EAAA,IAAI,EAAE;AAAA,WAAO;AACX,MAAA,aAAa,EADF,CAAA;AAEX,MAAA,gBAAgB,EAFL,CAAA;AAGX,MAAA,QAAQ,EAHG,KAAA;AAIX,MAAA,aAAa,EAJF,KAAA;AAKX,MAAA,cAAc,EALH,CAAA;AAMX,MAAA,WAAW,EANA,CAAA;AAOX,MAAA,MAAM,EAAE;AAPG,KAAP;AAAA,GAVkB;AAoBxB,EAAA,QAAQ,EAAE;AACR;;;;;AAKA,IAAA,SANQ,uBAMC;AACP,aAAO,OAAA,MAAA,KAAP,WAAA;AAPM,KAAA;;AASR;;;;AAIA,IAAA,uBAbQ,qCAae;AACrB,aAAO,KAAA,eAAA,GACH,MAAM,CAAC,KADJ,eACG,CADH,GAAP,GAAA;AAGD;AAjBO,GApBc;AAwCxB,EAAA,KAAK,EAAE;AACL,IAAA,aADK,2BACQ;AACX,WAAA,WAAA,GAAmB,KAAA,WAAA,IAAoB,KAAvC,aAAA;AAFG,KAAA;AAIL,IAAA,QAJK,sBAIG;AACN,WAAA,WAAA,GAAA,CAAA;AACD;AANI,GAxCiB;AAiDxB,EAAA,OAjDwB,qBAiDjB;AACL,QAAI,KAAJ,YAAA,EAAuB;AACrB,WAAA,MAAA,GAAc,QAAQ,CAAR,aAAA,CAAuB,KAArC,YAAc,CAAd;;AAEA,UAAI,CAAC,KAAL,MAAA,EAAkB;AAChB,QAAA,WAAW,oDAA6C,KAA7C,YAAA,GAAX,IAAW,CAAX;AACD;AACF;AAxDqB,GAAA;AA2DxB,EAAA,OAAO,EAAE;AACP,IAAA,QADO,sBACC;AAAA;;AACN,UAAI,CAAC,KAAL,SAAA,EAAqB;AAErB,WAAA,cAAA,GAAsB,KAAtB,aAAA;AACA,WAAA,aAAA,GAAqB,KAAA,MAAA,GACjB,KAAA,MAAA,CADiB,SAAA,GAEjB,MAAM,CAFV,WAAA;AAIA,WAAA,aAAA,GAAqB,KAAA,aAAA,GAAqB,KAA1C,cAAA;AACA,WAAA,gBAAA,GAAwB,IAAI,CAAJ,GAAA,CAAS,KAAA,aAAA,GAAqB,KAAtD,uBAAwB,CAAxB;AAEA,WAAA,SAAA,CAAe,YAAK;AAClB,YACE,IAAI,CAAJ,GAAA,CAAS,KAAA,CAAA,aAAA,GAAqB,KAAA,CAA9B,WAAA,IACA,KAAA,CAFF,uBAAA,EAGE,KAAA,CAAA,YAAA;AAJJ,OAAA;AAZK,KAAA;;AAmBP;;;;;AAKA,IAAA,YAxBO,0BAwBK,CAAkB;AAxBvB;AA3De,CAAX,CAAf","sourcesContent":["// Directives\nimport { Scroll } from '../../directives'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\n/**\n * Scrollable\n *\n * Used for monitoring scrolling and\n * invoking functions based upon\n * scrolling thresholds being\n * met.\n */\n/* @vue/component */\nexport default Vue.extend({\n  name: 'scrollable',\n\n  directives: { Scroll },\n\n  props: {\n    scrollTarget: String,\n    scrollThreshold: [String, Number],\n  },\n\n  data: () => ({\n    currentScroll: 0,\n    currentThreshold: 0,\n    isActive: false,\n    isScrollingUp: false,\n    previousScroll: 0,\n    savedScroll: 0,\n    target: null as Element | null,\n  }),\n\n  computed: {\n    /**\n     * A computed property that returns\n     * whether scrolling features are\n     * enabled or disabled\n     */\n    canScroll (): boolean {\n      return typeof window !== 'undefined'\n    },\n    /**\n     * The threshold that must be met before\n     * thresholdMet function is invoked\n     */\n    computedScrollThreshold (): number {\n      return this.scrollThreshold\n        ? Number(this.scrollThreshold)\n        : 300\n    },\n  },\n\n  watch: {\n    isScrollingUp () {\n      this.savedScroll = this.savedScroll || this.currentScroll\n    },\n    isActive () {\n      this.savedScroll = 0\n    },\n  },\n\n  mounted () {\n    if (this.scrollTarget) {\n      this.target = document.querySelector(this.scrollTarget)\n\n      if (!this.target) {\n        consoleWarn(`Unable to locate element with identifier ${this.scrollTarget}`, this)\n      }\n    }\n  },\n\n  methods: {\n    onScroll () {\n      if (!this.canScroll) return\n\n      this.previousScroll = this.currentScroll\n      this.currentScroll = this.target\n        ? this.target.scrollTop\n        : window.pageYOffset\n\n      this.isScrollingUp = this.currentScroll < this.previousScroll\n      this.currentThreshold = Math.abs(this.currentScroll - this.computedScrollThreshold)\n\n      this.$nextTick(() => {\n        if (\n          Math.abs(this.currentScroll - this.savedScroll) >\n          this.computedScrollThreshold\n        ) this.thresholdMet()\n      })\n    },\n    /**\n     * The method invoked when\n     * scrolling in any direction\n     * has exceeded the threshold\n     */\n    thresholdMet () { /* noop */ },\n  },\n})\n"],"sourceRoot":""}]}