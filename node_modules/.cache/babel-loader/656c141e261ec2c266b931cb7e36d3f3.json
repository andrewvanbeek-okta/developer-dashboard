{"remainingRequest":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js!/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelHeader.js","dependencies":[{"path":"/Users/maxpollard/developer-dashboard/node_modules/vuetify/lib/components/VExpansionPanel/VExpansionPanelHeader.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/maxpollard/developer-dashboard/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"/Users/maxpollard/developer-dashboard/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Components\nimport { VFadeTransition } from \"../transitions\";\nimport VIcon from \"../VIcon\"; // Mixins\n\nimport Colorable from \"../../mixins/colorable\";\nimport { inject as RegistrableInject } from \"../../mixins/registrable\"; // Directives\n\nimport ripple from \"../../directives/ripple\"; // Utilities\n\nimport { getSlot } from \"../../util/helpers\";\nimport mixins from \"../../util/mixins\";\nvar baseMixins = mixins(Colorable, RegistrableInject('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel'));\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-header',\n  directives: {\n    ripple: ripple\n  },\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand'\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      hasMousedown: false\n    };\n  },\n  computed: {\n    classes: function classes() {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown\n      };\n    },\n    isActive: function isActive() {\n      return this.expansionPanel.isActive;\n    },\n    isDisabled: function isDisabled() {\n      return this.expansionPanel.isDisabled;\n    },\n    isReadonly: function isReadonly() {\n      return this.expansionPanel.isReadonly;\n    }\n  },\n  created: function created() {\n    this.expansionPanel.registerHeader(this);\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.expansionPanel.unregisterHeader();\n  },\n  methods: {\n    onClick: function onClick(e) {\n      this.$emit('click', e);\n    },\n    genIcon: function genIcon() {\n      var icon = getSlot(this, 'actions') || [this.$createElement(VIcon, this.expandIcon)];\n      return this.$createElement(VFadeTransition, [this.$createElement('div', {\n        staticClass: 'v-expansion-panel-header__icon',\n        class: {\n          'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate\n        },\n        directives: [{\n          name: 'show',\n          value: !this.isDisabled\n        }]\n      }, icon)]);\n    }\n  },\n  render: function render(h) {\n    var _this = this;\n\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button'\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple\n      }],\n      on: _objectSpread({}, this.$listeners, {\n        click: this.onClick,\n        mousedown: function mousedown() {\n          return _this.hasMousedown = true;\n        },\n        mouseup: function mouseup() {\n          return _this.hasMousedown = false;\n        }\n      })\n    }), [getSlot(this, 'default', {\n      open: this.isActive\n    }, true), this.hideActions || this.genIcon()]);\n  }\n});",{"version":3,"sources":["../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts"],"names":[],"mappings":"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","sourcesContent":["// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n"],"sourceRoot":""}]}