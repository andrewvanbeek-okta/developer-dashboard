"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ssh_util_1 = require("./ssh-util");
const util_1 = require("./util");
const extractable = true;
function rsaPrivateKey(key) {
    return `-----BEGIN RSA PRIVATE KEY-----\n${key}-----END RSA PRIVATE KEY-----`;
}
function arrayBufferToBase64(buffer) {
    let binary = "";
    const bytes = new Uint8Array(buffer);
    const len = bytes.byteLength;
    for (let i = 0; i < len; i += 1) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}
exports.arrayBufferToBase64 = arrayBufferToBase64;
function generateKeyPair({ alg, size, name, hash }) {
    return __awaiter(this, void 0, void 0, function* () {
        const key = yield window.crypto.subtle
            .generateKey({
            name: alg,
            modulusLength: size,
            publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
            hash: { name: hash },
        }, extractable, ["sign", "verify"]);
        const privateKeyPromise = window.crypto.subtle
            .exportKey("jwk", key.privateKey)
            .then(ssh_util_1.encodePrivateKey)
            .then(util_1.wrapString)
            .then(rsaPrivateKey);
        const publicKeyPromise = window.crypto.subtle.exportKey("jwk", key.publicKey).then(jwk => ssh_util_1.encodePublicKey(jwk, name));
        const [privateKey, publicKey] = yield Promise.all([privateKeyPromise, publicKeyPromise]);
        return {
            privateKey,
            publicKey
        };
    });
}
exports.generateKeyPair = generateKeyPair;
//# sourceMappingURL=index.js.map