"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const ssh_util_1 = require("./ssh-util");
function pemPublicKey(key) {
    return `---- BEGIN RSA PUBLIC KEY ----\n${util_1.wrapString(key, 65)}---- END RSA PUBLIC KEY ----`;
}
function asn1Int(int) {
    const v = ssh_util_1.checkHighestBit(int);
    const len = ssh_util_1.asnEncodeLen(v.length);
    return [0x02].concat(len, v);
}
function asn1Seq(seq) {
    const len = ssh_util_1.asnEncodeLen(seq.length);
    return [0x30].concat(len, seq);
}
function decodePublicKey(s) {
    const split = s.split(" ");
    const prefix = split[0];
    if (prefix !== "ssh-rsa") {
        throw new Error(`Unknown prefix: ${prefix}`);
    }
    const buffer = ssh_util_1.pemToArray(split[1]);
    const nameLen = ssh_util_1.arrayToLen(buffer.splice(0, 4));
    const type = ssh_util_1.arrayToString(buffer.splice(0, nameLen));
    if (type !== "ssh-rsa") {
        throw new Error(`Unknown key type: ${type}`);
    }
    const exponentLen = ssh_util_1.arrayToLen(buffer.splice(0, 4));
    const exponent = buffer.splice(0, exponentLen);
    const keyLen = ssh_util_1.arrayToLen(buffer.splice(0, 4));
    const key = buffer.splice(0, keyLen);
    return { type, exponent, key, name: split[2] };
}
function publicSshToPem(publicKey) {
    const { key, exponent } = decodePublicKey(publicKey);
    const seq = [key, exponent].map(asn1Int).reduce((acc, a) => acc.concat(a));
    return pemPublicKey(ssh_util_1.arrayToPem(asn1Seq(seq)));
}
exports.publicSshToPem = publicSshToPem;
//# sourceMappingURL=publicSshToPem.js.map